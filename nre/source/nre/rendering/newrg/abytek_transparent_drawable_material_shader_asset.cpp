#include <nre/rendering/newrg/abytek_transparent_drawable_material_shader_asset.hpp>
#include <nre/rendering/nsl_shader_system.hpp>
#include <nre/io/path.hpp>


namespace nre::newrg
{
    F_abytek_transparent_drawable_material_shader_asset::F_abytek_transparent_drawable_material_shader_asset(
        const G_string& abs_path,
        E_abytek_drawable_material_flag flags,
        const G_string& src_content
    ) :
        F_abytek_drawable_material_shader_asset(abs_path, flags)
    {
        G_string name = H_path::file_name(abs_path);

        // approximated oit
        {
            approximated_oit_draw_subshader_ = compile_subshader(
                abs_path + ".approximated_oit_draw",
                "\n"
                "import(newrg/abytek/prerequisites.nsh)\n"
                "\n"
                "define NRE_NEWRG_ABYTEK_TRANSPARENT_PASS_APPROXIMATED_OIT()\n"
                "\n"
                "@slot(0 0)\n"
                "resource global_options(ConstantBuffer)\n"
                "uniform drawable_material_template_id(u32)\n"
                "uniform ___global_options_padding_p___(u32x3)\n"
                "uniform frame_data(F_frame_data)\n"
                "\n"
                "define NRE_NEWRG_ABYTEK_VIEW_BUFFER_SLOT(1)\n"
                "define NRE_NEWRG_ABYTEK_VIEW_BUFFER_SLOT_SPACE(0)\n"
                "import(newrg/abytek/view.nssm)\n"
                "\n"
                "@slot(2 0)\n"
                "resource instanced_cluster_range_cbuffer(ConstantBuffer)\n"
                "uniform instanced_cluster_range(F_instanced_cluster_range)\n"
                "\n"
                "@slot(0 0)\n"
                "resource instanced_cluster_headers(StructuredBuffer(F_instanced_cluster_header))\n"
                "\n"
                "@slot(0 1)\n"
                "resource mesh_headers(StructuredBuffer(F_mesh_header) -1)\n"
                "\n"
                "@slot(0 2)\n"
                "resource subpage_headers(StructuredBuffer(F_mesh_subpage_header) -1)\n"
                "\n"
                "@slot(0 3)\n"
                "resource cluster_headers(StructuredBuffer(F_cluster_header) -1)\n"
                "\n"
                "@slot(0 4)\n"
                "resource vertex_datas(StructuredBuffer(F_vertex_data) -1)\n"
                "\n"
                "@slot(0 5)\n"
                "resource triangle_vertex_ids(Buffer(uint) -1)\n"
                "\n"
                "@slot(0 6)\n"
                "resource instance_transforms(StructuredBuffer(float4x4) -1)\n"
                "\n"
                "@slot(0 7)\n"
                "resource instance_mesh_ids(Buffer(F_mesh_id) -1)\n"
                "\n"
                "import(" + name + ")\n"
                "\n"
                "semantic VERTEX_WORLD_POSITION(float3)\n"
                "semantic VERTEX_WORLD_NORMAL(float3)\n"
                "semantic VERTEX_WORLD_TANGENT(float3)\n"
                "semantic VERTEX_INTERPOLATED_CLIP_POSITION(float4)\n"
                "semantic VERTEX_CLUSTER_ID(uint)\n"
                "semantic VERTEX_INSTANCE_ID(uint)\n"
                "semantic PRIMITIVE_LOCAL_ID(uint)\n"
                "\n"
                "struct F_mesh_vertex_data(\n"
                    "vertex_world_position(VERTEX_WORLD_POSITION)\n"
                    "vertex_world_normal(VERTEX_WORLD_NORMAL)\n"
                    "vertex_world_tangent(VERTEX_WORLD_TANGENT)\n"
                    "vertex_interpolated_clip_position(VERTEX_INTERPOLATED_CLIP_POSITION)\n"
                    "vertex_cluster_id(VERTEX_CLUSTER_ID)\n"
                    "vertex_instance_id(VERTEX_INSTANCE_ID)\n"
                    "vertex_clip_position(SV_POSITION)\n"
                ")\n"
                "\n"
                "struct F_mesh_primitive(\n"
                    "local_id(PRIMITIVE_LOCAL_ID)\n"
                ")\n"
                "\n"
                "@thread_group_size(\n"
                    "NRE_NEWRG_UNIFIED_MESH_MAX_TRIANGLE_COUNT_PER_CLUSTER\n"
                    "1\n"
                    "1\n"
                ")\n"
                "mesh_shader MS(\n"
                    "group_thread_id(SV_GROUP_THREAD_ID)\n"
                    "group_id(SV_GROUP_ID)\n"
                    "@indices\n"
                    "out out_mesh_triangles(u32x3 124)\n"
                    "@vertices\n"
                    "out out_mesh_vertex_datas(F_mesh_vertex_data 124)\n"
                    "@primitives\n"
                    "out out_mesh_primitives(F_mesh_primitive 124)\n"
                ")\n"
                "{\n"
                    "F_instanced_cluster_header instanced_cluster_header = instanced_cluster_headers[instanced_cluster_range.offset + group_id.x];\n"
                    "\n"
                    "F_instance_id instance_id = instanced_cluster_header.instance_id;\n"
                    "F_cluster_id local_cluster_id = instanced_cluster_header.local_cluster_id;\n"
                    "\n"
                    "F_mesh_id mesh_id = instance_mesh_ids[\n"
                        "instance_id / NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "][\n"
                        "instance_id % NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "];\n"
                    "\n"
                    "float4x4 local_to_world_matrix = instance_transforms[\n"
                        "instance_id / NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "][\n"
                        "instance_id % NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "];\n"
                    "\n"
                    "F_mesh_header mesh_header = mesh_headers[\n"
                        "mesh_id / NRE_NEWRG_UNIFIED_MESH_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "][\n"
                        "mesh_id % NRE_NEWRG_UNIFIED_MESH_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "];\n"
                    "\n"
                    "F_cluster_id cluster_id = mesh_header.cluster_offset + local_cluster_id;\n"
                    "\n"
                    "F_cluster_header cluster_header = cluster_headers[\n"
                        "cluster_id / NRE_NEWRG_UNIFIED_MESH_CLUSTER_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "][\n"
                        "cluster_id % NRE_NEWRG_UNIFIED_MESH_CLUSTER_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "];\n"
                    "\n"
                    "u32 subpage_id = mesh_header.subpage_offset + local_cluster_id / NRE_NEWRG_UNIFIED_MESH_SUBPAGE_CAPACITY_IN_CLUSTERS;\n"
                    "F_mesh_subpage_header subpage_header = subpage_headers[\n"
                        "subpage_id / NRE_NEWRG_UNIFIED_MESH_SUBPAGE_HEADER_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "][\n"
                        "subpage_id % NRE_NEWRG_UNIFIED_MESH_SUBPAGE_HEADER_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "];\n"
                    "\n"
                    "u32 triangle_count = cluster_header.local_triangle_vertex_id_count / 3;\n"
                    "\n"
                    "SetMeshOutputCounts(cluster_header.vertex_count, triangle_count);\n"
                    "\n"
                    "if(group_thread_id.x < triangle_count)\n"
                    "{\n"
                        "uint index_offset = subpage_header.index_offset + (uint)(cluster_header.local_triangle_vertex_id_offset) + group_thread_id.x * 3;\n"
                        "\n"
                        "Buffer<uint> index_buffer = triangle_vertex_ids[index_offset / NRE_NEWRG_UNIFIED_MESH_TRIANGLE_VERTEX_ID_TABLE_PAGE_CAPACITY_IN_ELEMENTS];\n"
                        "\n"
                        "uint index_location_0 = index_offset + 0;\n"
                        "uint index_location_1 = index_offset + 1;\n"
                        "uint index_location_2 = index_offset + 2;\n"
                        "\n"
                        "out_mesh_triangles[group_thread_id.x] = uint3(\n"
                            "index_buffer[\n"
                                "index_location_0 % NRE_NEWRG_UNIFIED_MESH_TRIANGLE_VERTEX_ID_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                            "],\n"
                            "index_buffer[\n"
                                "index_location_1 % NRE_NEWRG_UNIFIED_MESH_TRIANGLE_VERTEX_ID_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                            "],\n"
                            "index_buffer[\n"
                                "index_location_2 % NRE_NEWRG_UNIFIED_MESH_TRIANGLE_VERTEX_ID_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                            "]\n"
                        ");\n"
                        "\n"
                        "out_mesh_primitives[group_thread_id.x].local_id = group_thread_id.x;\n"
                    "}\n"
                    "\n"
                    "if(group_thread_id.x < cluster_header.vertex_count)\n"
                    "{\n"
                        "uint vertex_offset = subpage_header.vertex_offset + cluster_header.vertex_offset + group_thread_id.x;\n"
                        "\n"
                        "F_vertex_data vertex_data = vertex_datas[\n"
                            "vertex_offset / NRE_NEWRG_UNIFIED_MESH_VERTEX_DATA_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                        "][\n"
                            "vertex_offset % NRE_NEWRG_UNIFIED_MESH_VERTEX_DATA_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                        "];\n"
                        "\n"
                        "float4 vertex_world_position = mul(local_to_world_matrix, float4(vertex_data.position, 1.0f));\n"
                        "float3 vertex_world_normal = normalize(mul((float3x3)local_to_world_matrix, vertex_data.normal));\n"
                        "float3 vertex_world_tangent = normalize(mul((float3x3)local_to_world_matrix, vertex_data.tangent));\n"
                        "\n"
                        "float4 vertex_view_position = mul(world_to_view_matrix, vertex_world_position);\n"
                        "float4 vertex_clip_position = mul(view_to_clip_matrix, vertex_view_position);\n"
                        "\n"
                        "F_mesh_vertex_data mesh_vertex_data;\n"
                        "mesh_vertex_data.vertex_world_position = vertex_world_position.xyz;\n"
                        "mesh_vertex_data.vertex_world_normal = vertex_world_normal;\n"
                        "mesh_vertex_data.vertex_world_tangent = vertex_world_tangent;\n"
                        "mesh_vertex_data.vertex_interpolated_clip_position = vertex_clip_position;\n"
                        "mesh_vertex_data.vertex_cluster_id = cluster_id;\n"
                        "mesh_vertex_data.vertex_instance_id = instance_id;\n"
                        "mesh_vertex_data.vertex_clip_position = vertex_clip_position;\n"
                        "\n"
                        "out_mesh_vertex_datas[group_thread_id.x] = mesh_vertex_data;\n"
                    "}\n"
                "}\n"
                "\n"
                "@target_binding(SV_TARGET_0)\n"
                "semantic OUT_ACCUM_RENDER_TARGET(float4)\n"
                "\n"
                "@target_binding(SV_TARGET_1)\n"
                "semantic OUT_REVEAL_RENDER_TARGET(float)\n"
                "\n"
                "pixel_shader PS(\n"
                    "in mesh_vertex_data(F_mesh_vertex_data)\n"
                    "in mesh_primitive(F_mesh_primitive)\n"
                    "out out_accum(OUT_ACCUM_RENDER_TARGET)\n"
                    "out out_reveal(OUT_REVEAL_RENDER_TARGET)\n"
                ")\n"
                "{\n"
                "   float4 out_color = float4(0, 0, 0, 1);\n"
                "   \n"
                    "import(SURFACE_PIXEL)\n"
                "   \n"
                "   float ndc_z = saturate(mesh_vertex_data.vertex_interpolated_clip_position.z / mesh_vertex_data.vertex_interpolated_clip_position.w);\n"
                "   \n"
                "   float mdc = max(dot(mesh_vertex_data.vertex_world_position - view_position, view_forward) - view_near_plane, 0) / (view_far_plane - view_near_plane);\n"
                "   mdc = mdc * mdc * mdc;\n"
                "   \n"
                "   float dw = out_color.w * max(0.01f, 3.0f * 1000.0f * mdc);\n"
                "   \n"
                "   out_accum = out_color * dw;\n"
                "   out_reveal = 1.0f - out_color.w;\n"
                "}\n"
                "\n"
                "@bindless\n"
                "root_signature RS(\n"
                "   DESCRIPTOR_TABLE(\n"
                "       CBV(3)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   SRV(1)\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 1)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 2)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 3)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 4)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 5)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 6)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 7)\n"
                "       SRV(-1)\n"
                "   )\n"
                ")\n"
                "\n"
                "require(CULL_BACK)\n"
                "{\n"
                "   define CULL_MODE(BACK)\n"
                "}\n"
                "require(CULL_FRONT)\n"
                "{\n"
                "   define CULL_MODE(FRONT)\n"
                "}\n"
                "require(!CULL_MODE)\n"
                "{\n"
                "   define CULL_MODE(NONE)\n"
                "}\n"
                "\n"
                "require(FILL_SOLID)\n"
                "{\n"
                "   define FILL_MODE(SOLID)\n"
                "}\n"
                "require(FILL_WIREFRAME)\n"
                "{\n"
                "   define FILL_MODE(WIREFRAME)\n"
                "}\n"
                "require(!FILL_MODE)\n"
                "{\n"
                "   define FILL_MODE(SOLID)\n"
                "}\n"
                "\n"
                "@root_signature(RS)\n"
                "@rasterizer(\n"
                "   cull_mode(CULL_MODE)\n"
                "   fill_mode(FILL_MODE)\n"
                ")\n"
                "@blend(\n"
                "   @src_blend_factor(ONE)\n"
                "   @dst_blend_factor(ONE)\n"
                "   @blend_operation(ADD)\n"
                "   @src_alpha_blend_factor(ONE)\n"
                "   @dst_alpha_blend_factor(ONE)\n"
                "   @alpha_blend_operation(ADD)\n"
                "   ACCUM\n"
                "   \n"
                "   @src_blend_factor(ZERO)\n"
                "   @dst_blend_factor(SRC_COLOR)\n"
                "   @blend_operation(ADD)\n"
                "   REVEAL\n"
                ")\n"
                "@depth_stencil(\n"
                "   enable_depth_test(true)\n"
                "   depth_buffer_write(false)\n"
                "   depth_comparison_func(GREATER_EQUAL)\n"
                ")\n"
                "@color_formats(\n"
                "   R16G16B16A16_FLOAT\n"
                "   R16_UNORM\n"
                ")\n"
                "pipeline_state PSO(MS PS)\n"
            );
        }

        // true oit
        {
            true_oit_draw_subshader_ = compile_subshader(
                abs_path + ".true_oit_draw",
                "\n"
                "import(newrg/abytek/prerequisites.nsh)\n"
                "import(newrg/virtual_pixel_buffer/utilities.nsh)\n"
                "\n"
                "define NRE_NEWRG_ABYTEK_TRANSPARENT_PASS_TRUE_OIT()\n"
                "\n"
                "@slot(0 0)\n"
                "resource global_options(ConstantBuffer)\n"
                "uniform drawable_material_template_id(u32)\n"
                "uniform virtual_pixel_buffer_capacity(u32)\n"
                "uniform ___global_options_padding_0___(u32x2)\n"
                "uniform frame_data(F_frame_data)\n"
                "\n"
                "define NRE_NEWRG_ABYTEK_VIEW_BUFFER_SLOT(1)\n"
                "define NRE_NEWRG_ABYTEK_VIEW_BUFFER_SLOT_SPACE(0)\n"
                "import(newrg/abytek/view.nssm)\n"
                "\n"
                "@slot(0 0)\n"
                "resource instanced_cluster_headers(StructuredBuffer(F_instanced_cluster_header))\n"
                "\n"
                "@slot(1 0)\n"
                "resource count_texture_2d(Texture2D(uint))\n"
                "\n"
                "@slot(2 0)\n"
                "resource offset_texture_2d(Texture2D(uint))\n"
                "\n"
                "@slot(0 0)\n"
                "resource instanced_cluster_ranges(RWStructuredBuffer(F_instanced_cluster_range))\n"
                "\n"
                "@slot(1 0)\n"
                "resource write_offset_texture_2d(RWTexture2D(uint))\n"
                "\n"
                "@slot(2 0)\n"
                "resource global_shared_datas(RWStructuredBuffer(F_virtual_pixel_global_shared_data))\n"
                "\n"
                "@slot(3 0)\n"
                "resource linked_head_node_id_texture_2d(RWTexture2D(uint))\n"
                "\n"
                "@slot(4 0)\n"
                "resource linked_next_node_ids(RWBuffer(uint))\n"
                "\n"
                "@slot(5 0)\n"
                "resource linked_data_ids(RWBuffer(uint))\n"
                "\n"
                "@slot(6 0)\n"
                "resource colors(RWBuffer(float4))\n"
                "\n"
                "@slot(7 0)\n"
                "resource depths(RWBuffer(float))\n"
                "\n"
                "@slot(0 1)\n"
                "resource mesh_headers(StructuredBuffer(F_mesh_header) -1)\n"
                "\n"
                "@slot(0 2)\n"
                "resource subpage_headers(StructuredBuffer(F_mesh_subpage_header) -1)\n"
                "\n"
                "@slot(0 3)\n"
                "resource cluster_headers(StructuredBuffer(F_cluster_header) -1)\n"
                "\n"
                "@slot(0 4)\n"
                "resource vertex_datas(StructuredBuffer(F_vertex_data) -1)\n"
                "\n"
                "@slot(0 5)\n"
                "resource triangle_vertex_ids(Buffer(uint) -1)\n"
                "\n"
                "@slot(0 6)\n"
                "resource instance_transforms(StructuredBuffer(float4x4) -1)\n"
                "\n"
                "@slot(0 7)\n"
                "resource instance_mesh_ids(Buffer(F_mesh_id) -1)\n"
                "\n"
                "import(" + name + ")\n"
                "\n"
                "semantic VERTEX_WORLD_POSITION(float3)\n"
                "semantic VERTEX_WORLD_NORMAL(float3)\n"
                "semantic VERTEX_WORLD_TANGENT(float3)\n"
                "semantic VERTEX_INTERPOLATED_CLIP_POSITION(float4)\n"
                "semantic VERTEX_CLUSTER_ID(uint)\n"
                "semantic VERTEX_INSTANCE_ID(uint)\n"
                "semantic PRIMITIVE_LOCAL_ID(uint)\n"
                "\n"
                "struct F_mesh_vertex_data(\n"
                    "vertex_world_position(VERTEX_WORLD_POSITION)\n"
                    "vertex_world_normal(VERTEX_WORLD_NORMAL)\n"
                    "vertex_world_tangent(VERTEX_WORLD_TANGENT)\n"
                    "vertex_interpolated_clip_position(VERTEX_INTERPOLATED_CLIP_POSITION)\n"
                    "vertex_cluster_id(VERTEX_CLUSTER_ID)\n"
                    "vertex_instance_id(VERTEX_INSTANCE_ID)\n"
                    "vertex_clip_position(SV_POSITION)\n"
                ")\n"
                "\n"
                "struct F_mesh_primitive(\n"
                    "local_id(PRIMITIVE_LOCAL_ID)\n"
                ")\n"
                "\n"
                "@thread_group_size(\n"
                    "NRE_NEWRG_UNIFIED_MESH_MAX_TRIANGLE_COUNT_PER_CLUSTER\n"
                    "1\n"
                    "1\n"
                ")\n"
                "mesh_shader MS(\n"
                    "group_thread_id(SV_GROUP_THREAD_ID)\n"
                    "group_id(SV_GROUP_ID)\n"
                    "@indices\n"
                    "out out_mesh_triangles(u32x3 124)\n"
                    "@vertices\n"
                    "out out_mesh_vertex_datas(F_mesh_vertex_data 124)\n"
                    "@primitives\n"
                    "out out_mesh_primitives(F_mesh_primitive 124)\n"
                ")\n"
                "{\n"
                    "F_instanced_cluster_header instanced_cluster_header = instanced_cluster_headers[instanced_cluster_ranges[0].offset + group_id.x];\n"
                    "\n"
                    "F_instance_id instance_id = instanced_cluster_header.instance_id;\n"
                    "F_cluster_id local_cluster_id = instanced_cluster_header.local_cluster_id;\n"
                    "\n"
                    "F_mesh_id mesh_id = instance_mesh_ids[\n"
                        "instance_id / NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "][\n"
                        "instance_id % NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "];\n"
                    "\n"
                    "float4x4 local_to_world_matrix = instance_transforms[\n"
                        "instance_id / NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "][\n"
                        "instance_id % NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "];\n"
                    "\n"
                    "F_mesh_header mesh_header = mesh_headers[\n"
                        "mesh_id / NRE_NEWRG_UNIFIED_MESH_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "][\n"
                        "mesh_id % NRE_NEWRG_UNIFIED_MESH_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "];\n"
                    "\n"
                    "F_cluster_id cluster_id = mesh_header.cluster_offset + local_cluster_id;\n"
                    "\n"
                    "F_cluster_header cluster_header = cluster_headers[\n"
                        "cluster_id / NRE_NEWRG_UNIFIED_MESH_CLUSTER_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "][\n"
                        "cluster_id % NRE_NEWRG_UNIFIED_MESH_CLUSTER_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "];\n"
                    "\n"
                    "u32 subpage_id = mesh_header.subpage_offset + local_cluster_id / NRE_NEWRG_UNIFIED_MESH_SUBPAGE_CAPACITY_IN_CLUSTERS;\n"
                    "F_mesh_subpage_header subpage_header = subpage_headers[\n"
                        "subpage_id / NRE_NEWRG_UNIFIED_MESH_SUBPAGE_HEADER_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "][\n"
                        "subpage_id % NRE_NEWRG_UNIFIED_MESH_SUBPAGE_HEADER_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "];\n"
                    "\n"
                    "u32 triangle_count = cluster_header.local_triangle_vertex_id_count / 3;\n"
                    "\n"
                    "SetMeshOutputCounts(cluster_header.vertex_count, triangle_count);\n"
                    "\n"
                    "if(group_thread_id.x < triangle_count)\n"
                    "{\n"
                        "uint index_offset = subpage_header.index_offset + (uint)(cluster_header.local_triangle_vertex_id_offset) + group_thread_id.x * 3;\n"
                        "\n"
                        "Buffer<uint> index_buffer = triangle_vertex_ids[index_offset / NRE_NEWRG_UNIFIED_MESH_TRIANGLE_VERTEX_ID_TABLE_PAGE_CAPACITY_IN_ELEMENTS];\n"
                        "\n"
                        "uint index_location_0 = index_offset + 0;\n"
                        "uint index_location_1 = index_offset + 1;\n"
                        "uint index_location_2 = index_offset + 2;\n"
                        "\n"
                        "out_mesh_triangles[group_thread_id.x] = uint3(\n"
                            "index_buffer[\n"
                                "index_location_0 % NRE_NEWRG_UNIFIED_MESH_TRIANGLE_VERTEX_ID_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                            "],\n"
                            "index_buffer[\n"
                                "index_location_1 % NRE_NEWRG_UNIFIED_MESH_TRIANGLE_VERTEX_ID_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                            "],\n"
                            "index_buffer[\n"
                                "index_location_2 % NRE_NEWRG_UNIFIED_MESH_TRIANGLE_VERTEX_ID_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                            "]\n"
                        ");\n"
                        "\n"
                        "out_mesh_primitives[group_thread_id.x].local_id = group_thread_id.x;\n"
                    "}\n"
                    "\n"
                    "if(group_thread_id.x < cluster_header.vertex_count)\n"
                    "{\n"
                        "uint vertex_offset = subpage_header.vertex_offset + cluster_header.vertex_offset + group_thread_id.x;\n"
                        "\n"
                        "F_vertex_data vertex_data = vertex_datas[\n"
                            "vertex_offset / NRE_NEWRG_UNIFIED_MESH_VERTEX_DATA_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                        "][\n"
                            "vertex_offset % NRE_NEWRG_UNIFIED_MESH_VERTEX_DATA_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                        "];\n"
                        "\n"
                        "float4 vertex_world_position = mul(local_to_world_matrix, float4(vertex_data.position, 1.0f));\n"
                        "float3 vertex_world_normal = normalize(mul((float3x3)local_to_world_matrix, vertex_data.normal));\n"
                        "float3 vertex_world_tangent = normalize(mul((float3x3)local_to_world_matrix, vertex_data.tangent));\n"
                        "\n"
                        "float4 vertex_view_position = mul(world_to_view_matrix, vertex_world_position);\n"
                        "float4 vertex_clip_position = mul(view_to_clip_matrix, vertex_view_position);\n"
                        "\n"
                        "F_mesh_vertex_data mesh_vertex_data;\n"
                        "mesh_vertex_data.vertex_world_position = vertex_world_position.xyz;\n"
                        "mesh_vertex_data.vertex_world_normal = vertex_world_normal;\n"
                        "mesh_vertex_data.vertex_world_tangent = vertex_world_tangent;\n"
                        "mesh_vertex_data.vertex_interpolated_clip_position = vertex_clip_position;\n"
                        "mesh_vertex_data.vertex_cluster_id = cluster_id;\n"
                        "mesh_vertex_data.vertex_instance_id = instance_id;\n"
                        "mesh_vertex_data.vertex_clip_position = vertex_clip_position;\n"
                        "\n"
                        "out_mesh_vertex_datas[group_thread_id.x] = mesh_vertex_data;\n"
                    "}\n"
                "}\n"
                "\n"
                "pixel_shader PS(\n"
                    "in mesh_vertex_data(F_mesh_vertex_data)\n"
                    "in mesh_primitive(F_mesh_primitive)\n"
                ")\n"
                "{\n"
                "   float4 out_color = float4(0, 0, 0, 1);\n"
                "   \n"
                "   float4 vertex_ndc_position = mesh_vertex_data.vertex_interpolated_clip_position / mesh_vertex_data.vertex_interpolated_clip_position.w;\n"
                "   \n"
                "   float2 screen_uv = saturate(vertex_ndc_position.xy * float2(0.5f, -0.5f) + float2(0.5f, 0.5f));\n"
                "   \n"
                "   uint2 screen_coord = round(screen_uv * float2(view_size - uint2(1, 1)));\n"
                "   \n"
                "   import(SURFACE_PIXEL)\n"
                "   \n"
                "   virtual_pixel_store_back(\n"
                "       screen_coord,\n"
                "       out_color,\n"
                "       saturate(vertex_ndc_position.z),\n"
                "       virtual_pixel_buffer_capacity,\n"
                "       count_texture_2d,\n"
                "       offset_texture_2d,\n"
                "       write_offset_texture_2d,\n"
                "       global_shared_datas,\n"
                "       linked_head_node_id_texture_2d,\n"
                "       linked_next_node_ids,\n"
                "       linked_data_ids,\n"
                "       colors,\n"
                "       depths\n"
                "   );\n"
                "}\n"
                "\n"
                "@bindless\n"
                "root_signature RS(\n"
                "   DESCRIPTOR_TABLE(\n"
                "       CBV(2)\n"
                "       \n"
                "       SRV(3)\n"
                "       \n"
                "       UAV(8)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 1)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 2)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 3)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 4)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 5)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 6)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 7)\n"
                "       SRV(-1)\n"
                "   )\n"
                ")\n"
                "\n"
                "require(CULL_BACK)\n"
                "{\n"
                "   define CULL_MODE(BACK)\n"
                "}\n"
                "require(CULL_FRONT)\n"
                "{\n"
                "   define CULL_MODE(FRONT)\n"
                "}\n"
                "require(!CULL_MODE)\n"
                "{\n"
                "   define CULL_MODE(NONE)\n"
                "}\n"
                "\n"
                "require(FILL_SOLID)\n"
                "{\n"
                "   define FILL_MODE(SOLID)\n"
                "}\n"
                "require(FILL_WIREFRAME)\n"
                "{\n"
                "   define FILL_MODE(WIREFRAME)\n"
                "}\n"
                "require(!FILL_MODE)\n"
                "{\n"
                "   define FILL_MODE(SOLID)\n"
                "}\n"
                "\n"
                "@root_signature(RS)\n"
                "@rasterizer(\n"
                "   cull_mode(CULL_MODE)\n"
                "   fill_mode(FILL_MODE)\n"
                ")\n"
                "@depth_stencil(\n"
                "   enable_depth_test(true)\n"
                "   depth_buffer_write(false)\n"
                "   depth_comparison_func(GREATER_EQUAL)\n"
                ")\n"
                "@color_formats()\n"
                "pipeline_state PSO(MS PS)\n"
            );
        }

        // mixed oit
        {
            mixed_oit_draw_subshader_ = compile_subshader(
                abs_path + ".mixed_oit_draw",
                "\n"
                "import(newrg/abytek/prerequisites.nsh)\n"
                "import(newrg/virtual_pixel_buffer/utilities.nsh)\n"
                "\n"
                "define NRE_NEWRG_ABYTEK_TRANSPARENT_PASS_TRUE_OIT()\n"
                "\n"
                "@slot(0 0)\n"
                "resource global_options(ConstantBuffer)\n"
                "uniform drawable_material_template_id(u32)\n"
                "uniform virtual_pixel_buffer_capacity(u32)\n"
                "uniform true_oit_single_level_distance(f32)\n"
                "uniform mixed_oit_max_view_depth_factor(f32)\n"
                "uniform virtual_pixel_analyzer_size(uint2)\n"
                "uniform ___global_options_padding_0___(uint2)\n"
                "uniform frame_data(F_frame_data)\n"
                "\n"
                "define NRE_NEWRG_ABYTEK_VIEW_BUFFER_SLOT(1)\n"
                "define NRE_NEWRG_ABYTEK_VIEW_BUFFER_SLOT_SPACE(0)\n"
                "import(newrg/abytek/view.nssm)\n"
                "\n"
                "@slot(0 0)\n"
                "resource instanced_cluster_headers(StructuredBuffer(F_instanced_cluster_header))\n"
                "\n"
                "@slot(1 0)\n"
                "resource count_texture_2d(Texture2D(uint))\n"
                "\n"
                "@slot(2 0)\n"
                "resource offset_texture_2d(Texture2D(uint))\n"
                "\n"
                "@slot(3 0)\n"
                "resource lres_view_depth_texture_2d(Texture2D(float))\n"
                "\n"
                "@slot(4 0)\n"
                "resource virtual_pixel_analyzer_levels(Texture2D(uint))\n"
                "\n"
                "@slot(0 0)\n"
                "resource instanced_cluster_ranges(RWStructuredBuffer(F_instanced_cluster_range))\n"
                "\n"
                "@slot(1 0)\n"
                "resource write_offset_texture_2d(RWTexture2D(uint))\n"
                "\n"
                "@slot(2 0)\n"
                "resource global_shared_datas(RWStructuredBuffer(F_virtual_pixel_global_shared_data))\n"
                "\n"
                "@slot(3 0)\n"
                "resource linked_head_node_id_texture_2d(RWTexture2D(uint))\n"
                "\n"
                "@slot(4 0)\n"
                "resource linked_next_node_ids(RWBuffer(uint))\n"
                "\n"
                "@slot(5 0)\n"
                "resource linked_data_ids(RWBuffer(uint))\n"
                "\n"
                "@slot(6 0)\n"
                "resource colors(RWBuffer(float4))\n"
                "\n"
                "@slot(7 0)\n"
                "resource depths(RWBuffer(float))\n"
                "\n"
                "@slot(8 0)\n"
                "resource virtual_pixel_analyzer_pixel_counters(RWBuffer(uint))\n"
                "\n"
                "@slot(0 1)\n"
                "resource mesh_headers(StructuredBuffer(F_mesh_header) -1)\n"
                "\n"
                "@slot(0 2)\n"
                "resource subpage_headers(StructuredBuffer(F_mesh_subpage_header) -1)\n"
                "\n"
                "@slot(0 3)\n"
                "resource cluster_headers(StructuredBuffer(F_cluster_header) -1)\n"
                "\n"
                "@slot(0 4)\n"
                "resource vertex_datas(StructuredBuffer(F_vertex_data) -1)\n"
                "\n"
                "@slot(0 5)\n"
                "resource triangle_vertex_ids(Buffer(uint) -1)\n"
                "\n"
                "@slot(0 6)\n"
                "resource instance_transforms(StructuredBuffer(float4x4) -1)\n"
                "\n"
                "@slot(0 7)\n"
                "resource instance_mesh_ids(Buffer(F_mesh_id) -1)\n"
                "\n"
                "import(" + name + ")\n"
                "\n"
                "semantic VERTEX_WORLD_POSITION(float3)\n"
                "semantic VERTEX_WORLD_NORMAL(float3)\n"
                "semantic VERTEX_WORLD_TANGENT(float3)\n"
                "semantic VERTEX_VIEW_POSITION(float3)\n"
                "semantic VERTEX_INTERPOLATED_CLIP_POSITION(float4)\n"
                "semantic VERTEX_CLUSTER_ID(uint)\n"
                "semantic VERTEX_INSTANCE_ID(uint)\n"
                "semantic PRIMITIVE_LOCAL_ID(uint)\n"
                "\n"
                "struct F_mesh_vertex_data(\n"
                    "vertex_world_position(VERTEX_WORLD_POSITION)\n"
                    "vertex_world_normal(VERTEX_WORLD_NORMAL)\n"
                    "vertex_world_tangent(VERTEX_WORLD_TANGENT)\n"
                    "vertex_view_position(VERTEX_VIEW_POSITION)\n"
                    "vertex_interpolated_clip_position(VERTEX_INTERPOLATED_CLIP_POSITION)\n"
                    "vertex_cluster_id(VERTEX_CLUSTER_ID)\n"
                    "vertex_instance_id(VERTEX_INSTANCE_ID)\n"
                    "vertex_clip_position(SV_POSITION)\n"
                ")\n"
                "\n"
                "struct F_mesh_primitive(\n"
                    "local_id(PRIMITIVE_LOCAL_ID)\n"
                ")\n"
                "\n"
                "@thread_group_size(\n"
                    "NRE_NEWRG_UNIFIED_MESH_MAX_TRIANGLE_COUNT_PER_CLUSTER\n"
                    "1\n"
                    "1\n"
                ")\n"
                "mesh_shader MS(\n"
                    "group_thread_id(SV_GROUP_THREAD_ID)\n"
                    "group_id(SV_GROUP_ID)\n"
                    "@indices\n"
                    "out out_mesh_triangles(u32x3 124)\n"
                    "@vertices\n"
                    "out out_mesh_vertex_datas(F_mesh_vertex_data 124)\n"
                    "@primitives\n"
                    "out out_mesh_primitives(F_mesh_primitive 124)\n"
                ")\n"
                "{\n"
                    "F_instanced_cluster_header instanced_cluster_header = instanced_cluster_headers[instanced_cluster_ranges[0].offset + group_id.x];\n"
                    "\n"
                    "F_instance_id instance_id = instanced_cluster_header.instance_id;\n"
                    "F_cluster_id local_cluster_id = instanced_cluster_header.local_cluster_id;\n"
                    "\n"
                    "F_mesh_id mesh_id = instance_mesh_ids[\n"
                        "instance_id / NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "][\n"
                        "instance_id % NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "];\n"
                    "\n"
                    "float4x4 local_to_world_matrix = instance_transforms[\n"
                        "instance_id / NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "][\n"
                        "instance_id % NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "];\n"
                    "\n"
                    "F_mesh_header mesh_header = mesh_headers[\n"
                        "mesh_id / NRE_NEWRG_UNIFIED_MESH_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "][\n"
                        "mesh_id % NRE_NEWRG_UNIFIED_MESH_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "];\n"
                    "\n"
                    "F_cluster_id cluster_id = mesh_header.cluster_offset + local_cluster_id;\n"
                    "\n"
                    "F_cluster_header cluster_header = cluster_headers[\n"
                        "cluster_id / NRE_NEWRG_UNIFIED_MESH_CLUSTER_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "][\n"
                        "cluster_id % NRE_NEWRG_UNIFIED_MESH_CLUSTER_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "];\n"
                    "\n"
                    "u32 subpage_id = mesh_header.subpage_offset + local_cluster_id / NRE_NEWRG_UNIFIED_MESH_SUBPAGE_CAPACITY_IN_CLUSTERS;\n"
                    "F_mesh_subpage_header subpage_header = subpage_headers[\n"
                        "subpage_id / NRE_NEWRG_UNIFIED_MESH_SUBPAGE_HEADER_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "][\n"
                        "subpage_id % NRE_NEWRG_UNIFIED_MESH_SUBPAGE_HEADER_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                    "];\n"
                    "\n"
                    "u32 triangle_count = cluster_header.local_triangle_vertex_id_count / 3;\n"
                    "\n"
                    "SetMeshOutputCounts(cluster_header.vertex_count, triangle_count);\n"
                    "\n"
                    "if(group_thread_id.x < triangle_count)\n"
                    "{\n"
                        "uint index_offset = subpage_header.index_offset + (uint)(cluster_header.local_triangle_vertex_id_offset) + group_thread_id.x * 3;\n"
                        "\n"
                        "Buffer<uint> index_buffer = triangle_vertex_ids[index_offset / NRE_NEWRG_UNIFIED_MESH_TRIANGLE_VERTEX_ID_TABLE_PAGE_CAPACITY_IN_ELEMENTS];\n"
                        "\n"
                        "uint index_location_0 = index_offset + 0;\n"
                        "uint index_location_1 = index_offset + 1;\n"
                        "uint index_location_2 = index_offset + 2;\n"
                        "\n"
                        "out_mesh_triangles[group_thread_id.x] = uint3(\n"
                            "index_buffer[\n"
                                "index_location_0 % NRE_NEWRG_UNIFIED_MESH_TRIANGLE_VERTEX_ID_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                            "],\n"
                            "index_buffer[\n"
                                "index_location_1 % NRE_NEWRG_UNIFIED_MESH_TRIANGLE_VERTEX_ID_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                            "],\n"
                            "index_buffer[\n"
                                "index_location_2 % NRE_NEWRG_UNIFIED_MESH_TRIANGLE_VERTEX_ID_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                            "]\n"
                        ");\n"
                        "\n"
                        "out_mesh_primitives[group_thread_id.x].local_id = group_thread_id.x;\n"
                    "}\n"
                    "\n"
                    "if(group_thread_id.x < cluster_header.vertex_count)\n"
                    "{\n"
                        "uint vertex_offset = subpage_header.vertex_offset + cluster_header.vertex_offset + group_thread_id.x;\n"
                        "\n"
                        "F_vertex_data vertex_data = vertex_datas[\n"
                            "vertex_offset / NRE_NEWRG_UNIFIED_MESH_VERTEX_DATA_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                        "][\n"
                            "vertex_offset % NRE_NEWRG_UNIFIED_MESH_VERTEX_DATA_TABLE_PAGE_CAPACITY_IN_ELEMENTS\n"
                        "];\n"
                        "\n"
                        "float4 vertex_world_position = mul(local_to_world_matrix, float4(vertex_data.position, 1.0f));\n"
                        "float3 vertex_world_normal = normalize(mul((float3x3)local_to_world_matrix, vertex_data.normal));\n"
                        "float3 vertex_world_tangent = normalize(mul((float3x3)local_to_world_matrix, vertex_data.tangent));\n"
                        "\n"
                        "float4 vertex_view_position = mul(world_to_view_matrix, vertex_world_position);\n"
                        "float4 vertex_clip_position = mul(view_to_clip_matrix, vertex_view_position);\n"
                        "\n"
                        "F_mesh_vertex_data mesh_vertex_data;\n"
                        "mesh_vertex_data.vertex_world_position = vertex_world_position.xyz;\n"
                        "mesh_vertex_data.vertex_world_normal = vertex_world_normal;\n"
                        "mesh_vertex_data.vertex_world_tangent = vertex_world_tangent;\n"
                        "mesh_vertex_data.vertex_view_position = vertex_view_position.xyz;\n"
                        "mesh_vertex_data.vertex_interpolated_clip_position = vertex_clip_position;\n"
                        "mesh_vertex_data.vertex_cluster_id = cluster_id;\n"
                        "mesh_vertex_data.vertex_instance_id = instance_id;\n"
                        "mesh_vertex_data.vertex_clip_position = vertex_clip_position;\n"
                        "\n"
                        "out_mesh_vertex_datas[group_thread_id.x] = mesh_vertex_data;\n"
                    "}\n"
                "}\n"
                "\n"
                "pixel_shader PS(\n"
                    "in mesh_vertex_data(F_mesh_vertex_data)\n"
                    "in mesh_primitive(F_mesh_primitive)\n"
                    "out out_rt_color(SV_TARGET)\n"
                ")\n"
                "{\n"
                "   float4 out_color = float4(0, 0, 0, 1);\n"
                "   \n"
                "   float4 vertex_ndc_position = mesh_vertex_data.vertex_interpolated_clip_position / mesh_vertex_data.vertex_interpolated_clip_position.w;\n"
                "   \n"
                "   float2 screen_uv = saturate(vertex_ndc_position.xy * float2(0.5f, -0.5f) + float2(0.5f, 0.5f));\n"
                "   \n"
                "   uint2 screen_coord = round(screen_uv * float2(view_size - uint2(1, 1)));\n"
                "   \n"
                "   import(SURFACE_PIXEL)\n"
                "   \n"
                "   {\n"
                "   uint2 virtual_pixel_analyzer_tile_id = round(screen_uv * float2(virtual_pixel_analyzer_size - uint2(1, 1)));\n"
                "   \n"
                "   u32 true_oit_highest_level = virtual_pixel_analyzer_levels[virtual_pixel_analyzer_tile_id];\n"
                "   \n"
                "   f32 mixed_oit_lres_view_depth = lres_view_depth_texture_2d[virtual_pixel_analyzer_tile_id];\n"
                "   \n"
                "   f32 mixed_oit_vertex_view_depth = max(mesh_vertex_data.vertex_view_position.z - mixed_oit_lres_view_depth, 0.0f);\n"
                "   mixed_oit_vertex_view_depth = lerp(\n"
                "       1.0f,\n"
                "       mixed_oit_max_view_depth_factor,\n"
                "       (mesh_vertex_data.vertex_view_position.z - view_near_plane) / (view_far_plane - view_near_plane)\n"
                "   ) * mixed_oit_vertex_view_depth;\n"
                "   \n"
                "   uint target_true_oit_level = floor(mixed_oit_vertex_view_depth / true_oit_single_level_distance);\n"
                "   \n"
                "   f32 true_oit_max_view_depth = -99999999.0f;\n"
                "   \n"
                "   if(target_true_oit_level < NRE_NEWRG_ABYTEK_TRUE_OIT_LEVEL_COUNT)\n"
                "   {\n"
                "       uint pixel_counter_id = (\n"
                "           (\n"
                "               virtual_pixel_analyzer_tile_id.y * virtual_pixel_analyzer_size.x\n"
                "               + virtual_pixel_analyzer_tile_id.x\n"
                "           ) * NRE_NEWRG_ABYTEK_TRUE_OIT_LEVEL_COUNT\n"
                "           + target_true_oit_level\n"
                "       );\n"
                "       \n"
                "       InterlockedAdd(\n"
                "           virtual_pixel_analyzer_pixel_counters[pixel_counter_id],\n"
                "           1\n"
                "       );\n"
                "       \n"
                "       if(true_oit_highest_level != NCPP_U32_MAX)\n"
                "       {\n"
                "           true_oit_max_view_depth = ((f32)(true_oit_highest_level + 1)) * true_oit_single_level_distance;\n"
                "       }\n"
                "   }\n"
                "   \n"
                "   if(mixed_oit_vertex_view_depth <= true_oit_max_view_depth)\n"
                "   {\n"
                "       b8 virtual_pixel_store_back_result = virtual_pixel_store_back(\n"
                "           screen_coord,\n"
                "           out_color,\n"
                "           saturate(vertex_ndc_position.z),\n"
                "           virtual_pixel_buffer_capacity,\n"
                "           count_texture_2d,\n"
                "           offset_texture_2d,\n"
                "           write_offset_texture_2d,\n"
                "           global_shared_datas,\n"
                "           linked_head_node_id_texture_2d,\n"
                "           linked_next_node_ids,\n"
                "           linked_data_ids,\n"
                "           colors,\n"
                "           depths\n"
                "       );\n"
                "       if(virtual_pixel_store_back_result) discard;\n"
                "   }\n"
                "   \n"
                "   out_rt_color = out_color;\n"
                "   }\n"
                "}\n"
                "\n"
                "@bindless\n"
                "root_signature RS(\n"
                "   DESCRIPTOR_TABLE(\n"
                "       CBV(2)\n"
                "       \n"
                "       SRV(5)\n"
                "       \n"
                "       UAV(9)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 1)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 2)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 3)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 4)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 5)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 6)\n"
                "       SRV(-1)\n"
                "   )\n"
                "   \n"
                "   @shader_visibility(MESH)\n"
                "   DESCRIPTOR_TABLE(\n"
                "       @slot(0 7)\n"
                "       SRV(-1)\n"
                "   )\n"
                ")\n"
                "\n"
                "require(CULL_BACK)\n"
                "{\n"
                "   define CULL_MODE(BACK)\n"
                "}\n"
                "require(CULL_FRONT)\n"
                "{\n"
                "   define CULL_MODE(FRONT)\n"
                "}\n"
                "require(!CULL_MODE)\n"
                "{\n"
                "   define CULL_MODE(NONE)\n"
                "}\n"
                "\n"
                "require(FILL_SOLID)\n"
                "{\n"
                "   define FILL_MODE(SOLID)\n"
                "}\n"
                "require(FILL_WIREFRAME)\n"
                "{\n"
                "   define FILL_MODE(WIREFRAME)\n"
                "}\n"
                "require(!FILL_MODE)\n"
                "{\n"
                "   define FILL_MODE(SOLID)\n"
                "}\n"
                "\n"
                "@root_signature(RS)\n"
                "@rasterizer(\n"
                "   cull_mode(CULL_MODE)\n"
                "   fill_mode(FILL_MODE)\n"
                ")\n"
                "@depth_stencil(\n"
                "   enable_depth_test(true)\n"
                "   depth_comparison_func(GREATER_EQUAL)\n"
                ")\n"
                "pipeline_state PSO(MS PS)\n"
            );
        }
    }
    F_abytek_transparent_drawable_material_shader_asset::~F_abytek_transparent_drawable_material_shader_asset()
    {
    }
}
