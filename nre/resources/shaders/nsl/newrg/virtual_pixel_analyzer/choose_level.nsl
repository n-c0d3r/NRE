
import(nrhi)



require(!NSL_DISABLE_AUTO_SLOTS)
{
    define NSL_DISABLE_AUTO_SLOTS
}



@slot(0)
resource options(ConstantBuffer)
uniform max_pixel_count(u32)

@slot(0)
resource non_empty_tile_counts(Buffer(u32))

@slot(1)
resource pixel_counters(Buffer(u32))

@slot(0)
resource levels(RWTexture2D(u32))



@thread_group_size(16 16 1)
compute_shader CS(
    global_thread_id(SV_DISPATCH_THREAD_ID)
)
{
    uint2 size;
    levels.GetDimensions(size.x, size.y);

    if(
        (global_thread_id.x < size.x)
        && (global_thread_id.y < size.y)
    )
    {
        u32 total_pixel_count = 0;
        u32 true_oit_highest_level = NCPP_U32_MAX;

        u32 non_empty_tile_count = non_empty_tile_counts[0];

        u32 local_max_pixel_count = max_pixel_count / non_empty_tile_count;

        for(u32 i = 0; i < NRE_NEWRG_ABYTEK_TRUE_OIT_LEVEL_COUNT; ++i)
        {
            uint pixel_counter_id = (
                (
                    global_thread_id.y * size.x 
                    + global_thread_id.x 
                ) * NRE_NEWRG_ABYTEK_TRUE_OIT_LEVEL_COUNT 
                + i
            );
            u32 pixel_count = pixel_counters[pixel_counter_id];

            total_pixel_count += pixel_count;
            if(total_pixel_count > local_max_pixel_count)
            {
                break;
            }

            true_oit_highest_level = i;
        }

        levels[global_thread_id.xy] = true_oit_highest_level;
    }
}



root_signature RS(
    CONSTANTS(1)

    DESCRIPTOR_TABLE(
        SRV(2)

        UAV(1)
    )
)

@root_signature(RS)
pipeline_state PSO(CS)