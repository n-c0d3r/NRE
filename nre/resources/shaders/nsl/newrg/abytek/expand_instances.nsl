
import(newrg/abytek/prerequisites.nsh)
import(newrg/abytek/geometry_utilities.nsh)



@slot(0 0)
resource instance_transforms(
    StructuredBuffer(f32x4x4)
    -1
)

@slot(0 1)
resource instance_mesh_ids(
    Buffer(F_mesh_id)
    -1
)

@slot(0 2)
resource mesh_headers(
    StructuredBuffer(F_mesh_header)
    -1
)

@slot(0 3)
resource mesh_culling_datas(
    StructuredBuffer(F_mesh_culling_data)
    -1
)

@slot(0 4)
resource options(
    ConstantBuffer
)
uniform instance_count(F_instance_id)

define NRE_NEWRG_ABYTEK_VIEW_BUFFER_SLOT(1)
define NRE_NEWRG_ABYTEK_VIEW_BUFFER_SLOT_SPACE(4)
import(newrg/abytek/view.nssm)

@slot(0 4)
resource instanced_cluster_headers(
    RWStructuredBuffer(F_instanced_cluster_header)
)

@slot(1 4)
resource instanced_cluster_ranges(
    RWStructuredBuffer(F_instanced_cluster_range)
)



groupshared u32 group_instanced_cluster_offset;



@thread_group_size(
    NRE_NEWRG_ABYTEK_EXPAND_INSTANCES_BATCH_SIZE
    1
    1
)
compute_shader CS(
    global_thread_id(SV_DISPATCH_THREAD_ID)
)
{
    F_instance_id instance_id = global_thread_id.x;

    if(instance_id >= instance_count)
        return;
        
    F_mesh_id mesh_id = instance_mesh_ids[
        instance_id / NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
    ][
        instance_id % NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
    ];

    b8 is_instance_valid = (mesh_id != INVALID_MESH_ID);
    if(!is_instance_valid)
        return;

    b8 is_culled = false;

    float4x4 local_to_world_matrix = instance_transforms[
        instance_id / NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
    ][
        instance_id % NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
    ];
    float4x4 local_to_view_matrix = mul(world_to_view_matrix, local_to_world_matrix);

    F_mesh_culling_data mesh_culling_data = mesh_culling_datas[
        mesh_id / NRE_NEWRG_UNIFIED_MESH_TABLE_PAGE_CAPACITY_IN_ELEMENTS
    ][
        mesh_id % NRE_NEWRG_UNIFIED_MESH_TABLE_PAGE_CAPACITY_IN_ELEMENTS
    ];

    F_bbox bbox = mesh_culling_data.bbox;

    float4 view_bbox_corners[8];
    view_bbox_corners[0] = mul(
        local_to_view_matrix,
        float4(
            bbox.min_position.x,
            bbox.min_position.y,
            bbox.min_position.z,
            1.0f
        )
    );
    view_bbox_corners[1] = mul(
        local_to_view_matrix,
        float4(
            bbox.max_position.x,
            bbox.min_position.y,
            bbox.min_position.z,
            1.0f
        )
    );
    view_bbox_corners[2] = mul(
        local_to_view_matrix,
        float4(
            bbox.min_position.x,
            bbox.max_position.y,
            bbox.min_position.z,
            1.0f
        )
    );
    view_bbox_corners[3] = mul(
        local_to_view_matrix,
        float4(
            bbox.min_position.x,
            bbox.min_position.y,
            bbox.max_position.z,
            1.0f
        )
    );
    view_bbox_corners[4] = mul(
        local_to_view_matrix,
        float4(
            bbox.max_position.x,
            bbox.max_position.y,
            bbox.min_position.z,
            1.0f
        )
    );
    view_bbox_corners[5] = mul(
        local_to_view_matrix,
        float4(
            bbox.min_position.x,
            bbox.max_position.y,
            bbox.max_position.z,
            1.0f
        )
    );
    view_bbox_corners[6] = mul(
        local_to_view_matrix,
        float4(
            bbox.max_position.x,
            bbox.min_position.y,
            bbox.max_position.z,
            1.0f
        )
    );
    view_bbox_corners[7] = mul(
        local_to_view_matrix,
        float4(
            bbox.max_position.x,
            bbox.max_position.y,
            bbox.max_position.z,
            1.0f
        )
    );
    
    float4 ndc_bbox_corners[8];
    [unroll]
    for(u32 i = 0; i < 8; ++i)
    {
        float4 view_bbox_corner = view_bbox_corners[i];
        view_bbox_corner.z = clamp(view_bbox_corner.z, view_near_plane, view_far_plane);

        ndc_bbox_corners[i] = view_to_ndc(
            view_to_clip_matrix,
            view_bbox_corner
        );
    }

    is_culled = is_culled || !is_cuboid_overlap_frustum(
        view_to_clip_matrix,
        view_near_plane,
        view_far_plane,
        view_bbox_corners,
        ndc_bbox_corners
    );

    if(is_culled)
        return;

    require(additional_check)
    {
        import(additional_check)
    }

    F_mesh_header mesh_header = mesh_headers[
        mesh_id / NRE_NEWRG_UNIFIED_MESH_TABLE_PAGE_CAPACITY_IN_ELEMENTS
    ][
        mesh_id % NRE_NEWRG_UNIFIED_MESH_TABLE_PAGE_CAPACITY_IN_ELEMENTS
    ];

    u32 local_root_cluster_offset = WavePrefixSum(mesh_header.root_cluster_count);
    u32 local_root_cluster_count = WaveActiveSum(mesh_header.root_cluster_count);

    if(local_root_cluster_offset == 0)
    {
        InterlockedAdd(
            instanced_cluster_ranges[0].count,
            local_root_cluster_count,
            group_instanced_cluster_offset
        );
    }
    AllMemoryBarrierWithGroupSync();

    u32 instanced_cluster_offset = group_instanced_cluster_offset + local_root_cluster_offset;

    for(u32 i = 0; i < mesh_header.root_cluster_count; ++i)
    {
        F_instanced_cluster_header instanced_cluster_header;
        instanced_cluster_header.instance_id = instance_id;
        instanced_cluster_header.local_cluster_id = (
            (mesh_header.root_cluster_offset - mesh_header.cluster_offset) + i
        );

        instanced_cluster_headers[instanced_cluster_offset + i] = instanced_cluster_header;
    }
}

@root_signature(NRE_NEWRG_ABYTEK_EXPAND_INSTANCES_BINDER_SIGNATURE)
pipeline_state PSO(CS)