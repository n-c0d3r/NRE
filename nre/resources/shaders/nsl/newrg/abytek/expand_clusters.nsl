
import(newrg/abytek/prerequisites.nsh)
import(newrg/abytek/geometry_utilities.nsh)



@slot(0 0)
resource instance_transforms(StructuredBuffer(f32x4x4) -1)

@slot(0 1)
resource instance_inverse_transforms(StructuredBuffer(f32x4x4) -1)

@slot(0 2)
resource instance_mesh_ids(Buffer(F_mesh_id) -1)

@slot(0 3)
resource mesh_headers(StructuredBuffer(F_mesh_header) -1)

@slot(0 4)
resource mesh_culling_datas(StructuredBuffer(F_mesh_culling_data) -1)

@slot(0 5)
resource cluster_node_headers(StructuredBuffer(F_cluster_node_header) -1)

@slot(0 6)
resource cluster_bboxes(StructuredBuffer(F_bbox) -1)

@slot(0 7)
resource cluster_hierarchical_culling_datas(StructuredBuffer(F_cluster_hierarchical_culling_data) -1)

define NRE_NEWRG_ABYTEK_VIEW_BUFFER_SLOT(0)
define NRE_NEWRG_ABYTEK_VIEW_BUFFER_SLOT_SPACE(8)
import(newrg/abytek/view.nssm)

@slot(0 8)
resource instanced_cluster_headers(RWStructuredBuffer(F_instanced_cluster_header))

require(!NO_OCCLUSION_CULLING)
{
    @slot(0 8)
    resource hzb(Texture2D(float))
}



require(ADDITIONAL_RESOURCES)
{
    import(ADDITIONAL_RESOURCES)
}



@slot(1 8)
@globally_coherent
resource global_shared_datas(RWStructuredBuffer(F_expand_clusters_global_shared_data))

@slot(2 8)
@globally_coherent
resource global_cached_candidates(RWStructuredBuffer(F_instanced_cluster_header))

@slot(3 8)
@globally_coherent
resource global_cached_candidate_batches(RWStructuredBuffer(F_cached_candidate_batch))



groupshared F_instanced_cluster_header group_active_candidates[NRE_NEWRG_ABYTEK_EXPAND_CLUSTERS_BATCH_SIZE];
groupshared uint group_active_candidate_count;

groupshared F_instanced_cluster_header group_cached_candidates[NRE_NEWRG_ABYTEK_EXPAND_CLUSTERS_BATCH_SIZE * NRE_NEWRG_UNIFIED_MESH_MAX_CLUSTER_CHILD_COUNT];
groupshared uint group_cached_candidate_count;

groupshared uint global_cached_candidate_batch_offset;
groupshared uint global_cached_candidate_offset;

groupshared uint global_active_candidate_offset;

groupshared u32 group_expanded_instanced_cluster_local_offset;



require(ADDITIONAL_GROUP_SHARES)
{
    import(ADDITIONAL_GROUP_SHARES)
}



@thread_group_size(
    NRE_NEWRG_ABYTEK_EXPAND_CLUSTERS_BATCH_SIZE
    1
    1
)
compute_shader CS(
    global_thread_id(SV_DISPATCH_THREAD_ID)
    group_id(SV_GROUP_ID)
    group_thread_id(SV_GROUP_THREAD_ID)
)
{
    //
    u32 expanded_instanced_cluster_offset = global_shared_datas[0].expanded_instanced_cluster_range.offset;

    // 
    F_instanced_cluster_range instanced_cluster_range = global_shared_datas[0].instanced_cluster_range;

    // initialize group shared memory
    if(group_thread_id.x == 0)
    {
        group_active_candidate_count = 0;
        group_cached_candidate_count = 0;
        group_expanded_instanced_cluster_local_offset = 0;
        global_active_candidate_offset = INVALID_CACHED_CANDIDATE_ID;
    }
    if(global_thread_id.x < instanced_cluster_range.count)
    {
        if(group_thread_id.x == 0)
        {
            group_active_candidate_count = min(
                max(
                    (int)instanced_cluster_range.count - 
                    (int)group_id.x * NRE_NEWRG_ABYTEK_EXPAND_CLUSTERS_BATCH_SIZE,
                    0
                ),
                NRE_NEWRG_ABYTEK_EXPAND_CLUSTERS_BATCH_SIZE
            );
        }

        group_active_candidates[group_thread_id.x] = instanced_cluster_headers[instanced_cluster_range.offset + global_thread_id.x];
    }
    AllMemoryBarrierWithGroupSync();

    //
    require(ADDITIONAL_INIT)
    {
        import(ADDITIONAL_INIT)
    }

    //
    b8 process_active_candidates;

    // 
    u32 global_cached_candidate_batch_read_offset = INVALID_CACHED_CANDIDATE_BATCH_ID;

    // main loop
    while(global_shared_datas[0].counter)
    {
        AllMemoryBarrierWithGroupSync();

        process_active_candidates = (group_active_candidate_count > 0);

        if(process_active_candidates)
        {
             // process active candidates
            if(group_thread_id.x < group_active_candidate_count)
            {
                F_instanced_cluster_header instanced_cluster_header = group_active_candidates[group_thread_id.x];

                float4x4 instance_transform = instance_transforms[
                    instanced_cluster_header.instance_id / NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
                ][
                    instanced_cluster_header.instance_id % NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
                ];

                float4x4 instance_inverse_transform = instance_inverse_transforms[
                    instanced_cluster_header.instance_id / NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
                ][
                    instanced_cluster_header.instance_id % NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
                ];

                F_mesh_id mesh_id = instance_mesh_ids[
                    instanced_cluster_header.instance_id / NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
                ][
                    instanced_cluster_header.instance_id % NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
                ];

                F_mesh_header mesh_header = mesh_headers[
                    mesh_id / NRE_NEWRG_UNIFIED_MESH_TABLE_PAGE_CAPACITY_IN_ELEMENTS
                ][
                    mesh_id % NRE_NEWRG_UNIFIED_MESH_TABLE_PAGE_CAPACITY_IN_ELEMENTS
                ];

                F_cluster_id cluster_id = mesh_header.cluster_offset + instanced_cluster_header.local_cluster_id;

                F_cluster_node_header cluster_node_header = cluster_node_headers[
                    cluster_id / NRE_NEWRG_UNIFIED_MESH_CLUSTER_TABLE_PAGE_CAPACITY_IN_ELEMENTS
                ][
                    cluster_id % NRE_NEWRG_UNIFIED_MESH_CLUSTER_TABLE_PAGE_CAPACITY_IN_ELEMENTS
                ];

                F_bbox cluster_bbox = cluster_bboxes[
                    cluster_id / NRE_NEWRG_UNIFIED_MESH_CLUSTER_TABLE_PAGE_CAPACITY_IN_ELEMENTS
                ][
                    cluster_id % NRE_NEWRG_UNIFIED_MESH_CLUSTER_TABLE_PAGE_CAPACITY_IN_ELEMENTS
                ];

                F_cluster_hierarchical_culling_data cluster_hierarchical_culling_data = cluster_hierarchical_culling_datas[
                    cluster_id / NRE_NEWRG_UNIFIED_MESH_CLUSTER_TABLE_PAGE_CAPACITY_IN_ELEMENTS
                ][
                    cluster_id % NRE_NEWRG_UNIFIED_MESH_CLUSTER_TABLE_PAGE_CAPACITY_IN_ELEMENTS
                ];

                //
                require(ADDITIONAL_LOAD_INSTANCED_CLUSTER)
                {
                    import(ADDITIONAL_LOAD_INSTANCED_CLUSTER)
                }

                float3 local_view_position = mul(
                    instance_inverse_transform,
                    float4(view_position, 1.0f)
                ).xyz;

                float3 outer_error_sphere_center_to_view_position = local_view_position - cluster_hierarchical_culling_data.outer_error_sphere.center;
                float3 outer_error_sphere_center_to_view_position_length = length(outer_error_sphere_center_to_view_position);
                float3 error_sphere_center = (
                    cluster_hierarchical_culling_data.outer_error_sphere.center 
                    + normalize(outer_error_sphere_center_to_view_position)
                    * min(
                        outer_error_sphere_center_to_view_position_length 
                        - cluster_hierarchical_culling_data.error_radius,
                        cluster_hierarchical_culling_data.outer_error_sphere.radius 
                        - cluster_hierarchical_culling_data.error_radius
                    )
                );

                //
                float3 local_instance_view_right = normalize(
                    mul((float3x3)instance_inverse_transform, view_right)
                );
                float3 local_instance_view_up = normalize(
                    mul((float3x3)instance_inverse_transform, view_up)
                );

                //
                float4x4 local_to_view_matrix = mul(world_to_view_matrix, instance_transform);
                float4x4 local_to_clip_matrix = mul(
                    view_to_clip_matrix,
                    local_to_view_matrix
                );

                //
                float projected_error_radius_square = sphere_to_screen_space_radius_square(
                    local_to_clip_matrix,
                    error_sphere_center,
                    cluster_hierarchical_culling_data.error_radius,
                    local_instance_view_right,
                    local_instance_view_up,
                    view_size
                );

                //
                float error_square = (
                    (
                        cluster_hierarchical_culling_data.error_factor
                        + 1.0f
                    )
                    * (
                        cluster_hierarchical_culling_data.error_factor
                        + 1.0f
                    )
                    * projected_error_radius_square
                );

                // if expand childs
                f32 lod_error_threshold = global_shared_datas[0].lod_error_threshold;
                b8 late_expand_childs = (error_square >= (lod_error_threshold * lod_error_threshold));
            
                // process instanced cluster
                b8 is_culled = false;

                F_bbox cluster_cull_bbox;
                cluster_cull_bbox.min_position = (late_expand_childs) ? cluster_hierarchical_culling_data.bbox.min_position : cluster_bbox.min_position;
                cluster_cull_bbox.max_position = (late_expand_childs) ? cluster_hierarchical_culling_data.bbox.max_position : cluster_bbox.max_position;

                // calculate cull
                {
                    require(PRE_CULL_CLUSTER)
                    {
                        import(PRE_CULL_CLUSTER)
                    }

                    float4 bbox_corners[8];
                    calculate_bbox_corners(cluster_cull_bbox, bbox_corners);

                    float4 view_bbox_corners[8];
                    transform_cuboid_corners(local_to_view_matrix, bbox_corners, view_bbox_corners);
                    
                    float4 ndc_bbox_corners[8];
                    cuboid_view_corners_to_ndc_corners(
                        view_to_clip_matrix,
                        view_near_plane,
                        view_far_plane,
                        view_bbox_corners, 
                        ndc_bbox_corners
                    );

                    F_occluder occluder;
                    calculate_occluder(
                        view_bbox_corners,
                        ndc_bbox_corners,
                        occluder
                    );

                    // frustum culling
                    is_culled = is_culled || !is_occluder_overlap_frustum(
                        view_to_clip_matrix,
                        view_near_plane,
                        view_far_plane,
                        occluder
                    );

                    // small cluster culling
                    f32 cull_error_threshold = global_shared_datas[0].cull_error_threshold;
                    is_culled = is_culled || (
                        (error_square < (cull_error_threshold * cull_error_threshold))
                        && ((cluster_hierarchical_culling_data.flags & CLUSTER_HIERARCHICAL_CULLING_DATA_FLAG_HAS_PARENT) == 0)
                    );

                    // occlusion culling
                    require(!NO_OCCLUSION_CULLING)
                    {
                        if(!is_culled)
                        {
                            require(!ALTERNATIVE_OCCLUSION_CULLING)
                            {
                                is_culled = is_occluded_with_hzb(
                                    hzb,
                                    occluder
                                );
                            }
                            otherwise()
                            {
                                import(ALTERNATIVE_OCCLUSION_CULLING)
                            }
                        }
                    }

                    //
                    require(ADDITIONAL_CULL_INSTANCED_CLUSTER)
                    {
                        import(ADDITIONAL_CULL_INSTANCED_CLUSTER)
                    }

                    require(POST_CULL_CLUSTER)
                    {
                        import(POST_CULL_CLUSTER)
                    }
                }

                // if expand childs
                b8 expand_childs = late_expand_childs;
                expand_childs = expand_childs && cluster_hierarchical_culling_data.child_node_count;
                expand_childs = expand_childs && !is_culled;

                //
                if(
                    !is_culled
                    && !expand_childs
                )
                {
                    u32 local_expanded_instanced_cluster_offset = WavePrefixCountBits(true);
                    u32 local_expanded_instanced_cluster_count = WaveActiveCountBits(true);
                    
                    if(local_expanded_instanced_cluster_offset == 0)
                    {
                        InterlockedAdd(
                            global_shared_datas[0].expanded_instanced_cluster_range.count,
                            local_expanded_instanced_cluster_count,
                            group_expanded_instanced_cluster_local_offset
                        );
                    }
                    AllMemoryBarrierWithGroupSync();
                    
                    instanced_cluster_headers[
                        expanded_instanced_cluster_offset
                        + group_expanded_instanced_cluster_local_offset
                        + local_expanded_instanced_cluster_offset
                    ] = instanced_cluster_header;
                    AllMemoryBarrierWithGroupSync();
                }

                // store group cached candidates
                if(
                    expand_childs 
                    && (cluster_hierarchical_culling_data.flags & CLUSTER_HIERARCHICAL_CULLING_DATA_FLAG_CRITICAL)
                )
                {
                    uint local_cached_candidate_offset = WavePrefixSum(cluster_hierarchical_culling_data.child_node_count);
                    uint new_group_cached_candidate_count = WaveActiveSum(cluster_hierarchical_culling_data.child_node_count);

                    if(local_cached_candidate_offset == 0)
                    {
                        group_cached_candidate_count = new_group_cached_candidate_count;
                    }

                    F_cluster_id local_child_node_ids[NRE_NEWRG_UNIFIED_MESH_CLUSTER_CHILD_ID_PACK_COUNT * 4];

                    [unroll]
                    for(u32 i = 0; i < NRE_NEWRG_UNIFIED_MESH_CLUSTER_CHILD_ID_PACK_COUNT; ++i)
                    {                        
                        local_child_node_ids[i * 4 + 0] = cluster_node_header.child_node_id_packs[i].x;
                        local_child_node_ids[i * 4 + 1] = cluster_node_header.child_node_id_packs[i].y;
                        local_child_node_ids[i * 4 + 2] = cluster_node_header.child_node_id_packs[i].z;
                        local_child_node_ids[i * 4 + 3] = cluster_node_header.child_node_id_packs[i].w;
                    }

                    for(u32 i = 0; i < cluster_hierarchical_culling_data.child_node_count; ++i)
                    {
                        group_cached_candidates[local_cached_candidate_offset].instance_id = instanced_cluster_header.instance_id;
                        group_cached_candidates[local_cached_candidate_offset].local_cluster_id = local_child_node_ids[i];
                        ++local_cached_candidate_offset;
                    }
                }

                //
                require(ADDITIONAL_END_PROCESS_INSTANCED_CLUSTER)
                {
                    import(ADDITIONAL_END_PROCESS_INSTANCED_CLUSTER)
                }
            }      
            AllMemoryBarrierWithGroupSync();

            // read group_cached_candidate_count and reset it
            uint new_group_cached_candidate_count = group_cached_candidate_count;
            if(new_group_cached_candidate_count && (group_thread_id.x == 0))
            {
                InterlockedAdd(
                    global_shared_datas[0].counter,
                    new_group_cached_candidate_count
                );
            }
            if(group_thread_id.x == 0)
            {
                InterlockedAdd(
                    global_shared_datas[0].counter,
                    -group_active_candidate_count
                );
            }
            AllMemoryBarrierWithGroupSync();
            if(group_thread_id.x == 0)
            {
                group_cached_candidate_count = 0;
                group_expanded_instanced_cluster_local_offset = 0;
            }

            // setup new active candidates
            {
                uint main_group_cached_candidate_count = min(
                    new_group_cached_candidate_count,
                    NRE_NEWRG_ABYTEK_EXPAND_CLUSTERS_BATCH_SIZE
                );
                if(group_thread_id.x == 0)
                {
                    group_active_candidate_count = main_group_cached_candidate_count;
                }
                if(group_thread_id.x < main_group_cached_candidate_count)
                {
                    group_active_candidates[group_thread_id.x] = group_cached_candidates[group_thread_id.x];
                }
            }
            AllMemoryBarrierWithGroupSync();

            // enqueue cached candidate batches into global queue
            {
                // store cached candidates and cached candidate batches
                uint group_cached_candidate_batch_count = ceil(
                    f32(new_group_cached_candidate_count)
                    / f32(NRE_NEWRG_ABYTEK_EXPAND_CLUSTERS_BATCH_SIZE)
                );

                for(u32 i = 1; i < group_cached_candidate_batch_count; ++i)
                {
                    AllMemoryBarrierWithGroupSync();

                    uint group_cached_candidate_local_offset_for_global_store = NRE_NEWRG_ABYTEK_EXPAND_CLUSTERS_BATCH_SIZE * i;
                    uint group_cached_candidate_local_count_for_global_store = min(
                        group_cached_candidate_local_offset_for_global_store + NRE_NEWRG_ABYTEK_EXPAND_CLUSTERS_BATCH_SIZE,
                        new_group_cached_candidate_count
                    ) - group_cached_candidate_local_offset_for_global_store;

                    // allocate global memory
                    {
                        if(group_thread_id.x == 0)
                        {
                            // allocate global candidates
                            InterlockedAdd(
                                global_shared_datas[0].cached_candidate_offset,
                                group_cached_candidate_local_count_for_global_store,
                                global_cached_candidate_offset
                            );
                            // allocate global candidate batches
                            InterlockedAdd(
                                global_shared_datas[0].cached_candidate_batch_offset,
                                1,
                                global_cached_candidate_batch_offset
                            );
                        }
                    }
                    AllMemoryBarrierWithGroupSync();

                    // store global memory
                    {
                        // store global cached candidates
                        if(group_thread_id.x < group_cached_candidate_local_count_for_global_store)
                        {
                            uint group_cached_candidate_local_index_for_global_store = group_cached_candidate_local_offset_for_global_store + group_thread_id.x;
                            
                            global_cached_candidates[
                                global_cached_candidate_offset
                                + group_thread_id.x
                            ] = group_cached_candidates[
                                group_cached_candidate_local_index_for_global_store
                            ];
                        }
                        // store global cached candidate batches
                        if(group_thread_id.x == 0)
                        {
                            F_cached_candidate_batch global_candidate_batch;
                            global_candidate_batch.offset = global_cached_candidate_offset;
                            global_candidate_batch.count = group_cached_candidate_local_count_for_global_store;

                            global_cached_candidate_batches[global_cached_candidate_batch_offset] = global_candidate_batch;
                        }
                    }
                    AllMemoryBarrierWithGroupSync();
                }
            }
        }

        if(
            !process_active_candidates 
            && (global_cached_candidate_batch_read_offset == INVALID_CACHED_CANDIDATE_BATCH_ID)
            && (group_thread_id.x == 0)
        )
        {
            InterlockedAdd(
                global_shared_datas[0].cached_candidate_batch_read_offset,
                1,
                global_cached_candidate_batch_read_offset
            );
        }

        if(
            !process_active_candidates 
            && (global_cached_candidate_batch_read_offset != INVALID_CACHED_CANDIDATE_BATCH_ID)
            && (group_thread_id.x == 0)
        )
        {
            F_cached_candidate_batch new_cached_candidate_batch = global_cached_candidate_batches[global_cached_candidate_batch_read_offset];

            group_active_candidate_count = new_cached_candidate_batch.count;

            global_active_candidate_offset = (
                (new_cached_candidate_batch.count)
                ? new_cached_candidate_batch.offset
                : global_active_candidate_offset
            );
        }

        if(
            !process_active_candidates
            && (global_active_candidate_offset != INVALID_CACHED_CANDIDATE_ID)
        )
        {   
            AllMemoryBarrierWithGroupSync();

            if(group_thread_id.x < group_active_candidate_count)
            {
                group_active_candidates[group_thread_id.x] = global_cached_candidates[global_active_candidate_offset + group_thread_id.x];
            }

            AllMemoryBarrierWithGroupSync();

            if(group_thread_id.x == 0)
            {
                global_active_candidate_offset = INVALID_CACHED_CANDIDATE_ID;
                global_cached_candidate_batch_read_offset = INVALID_CACHED_CANDIDATE_BATCH_ID;
            }

            GroupMemoryBarrierWithGroupSync();
        }
    }
}

require(!ROOT_SIGNATURE)
{
    define ROOT_SIGNATURE(NRE_NEWRG_ABYTEK_EXPAND_CLUSTERS_BINDER_SIGNATURE)
}
@root_signature(ROOT_SIGNATURE)
pipeline_state PSO(CS)