
import(newrg/abytek/prerequisites.nsh)
import(newrg/abytek/geometry_utilities.nsh)



@slot(0)
resource global_shared_datas(RWStructuredBuffer(F_build_instanced_cluster_group_global_shared_data))

@slot(1)
resource node_instanced_cluster_ids(RWBuffer(F_instanced_cluster_id))

@slot(2)
resource next_node_ids(RWBuffer(F_instanced_cluster_id))

@slot(3)
resource hierarchical_group_head_node_ids(RWBuffer(u32))

@slot(0)
resource instanced_cluster_headers(StructuredBuffer(F_instanced_cluster_header))

@slot(0 0)
resource options(ConstantBuffer)
uniform screen_size(uint2)

define NRE_NEWRG_ABYTEK_VIEW_BUFFER_SLOT(1)
define NRE_NEWRG_ABYTEK_VIEW_BUFFER_SLOT_SPACE(0)
import(newrg/abytek/view.nssm)

@slot(0 1)
resource instance_transforms(StructuredBuffer(float4x4) -1)

@slot(0 2)
resource instance_mesh_ids(Buffer(F_mesh_id) -1)

@slot(0 3)
resource mesh_headers(StructuredBuffer(F_mesh_header) -1)

@slot(0 4)
resource cluster_bboxes(StructuredBuffer(F_bbox) -1)



@thread_group_size(
    NRE_NEWRG_ABYTEK_DEFAULT_THREAD_GROUP_SIZE_X
    NRE_NEWRG_ABYTEK_DEFAULT_THREAD_GROUP_SIZE_Y
    NRE_NEWRG_ABYTEK_DEFAULT_THREAD_GROUP_SIZE_Z
)
compute_shader CS(
    global_thread_id(SV_DISPATCH_THREAD_ID)
)
{
    F_instanced_cluster_range instanced_cluster_range = global_shared_datas[0].instanced_cluster_range;

    if(global_thread_id.x < instanced_cluster_range.count)
    {
        F_instanced_cluster_id instanced_cluster_id = instanced_cluster_range.offset + global_thread_id.x;
        F_instanced_cluster_header instanced_cluster_header = instanced_cluster_headers[instanced_cluster_id];

        next_node_ids[global_thread_id.x] = INVALID_INSTANCED_CLUSTER_NODE_ID;

        float4x4 instance_transform = instance_transforms[
            instanced_cluster_header.instance_id / NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
        ][
            instanced_cluster_header.instance_id % NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
        ];

        float4x4 local_to_view_matrix = mul(world_to_view_matrix, instance_transform);

        F_mesh_id mesh_id = instance_mesh_ids[
            instanced_cluster_header.instance_id / NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
        ][
            instanced_cluster_header.instance_id % NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
        ];

        F_mesh_header mesh_header = mesh_headers[
            mesh_id / NRE_NEWRG_UNIFIED_MESH_TABLE_PAGE_CAPACITY_IN_ELEMENTS
        ][
            mesh_id % NRE_NEWRG_UNIFIED_MESH_TABLE_PAGE_CAPACITY_IN_ELEMENTS
        ];

        F_cluster_id cluster_id = mesh_header.cluster_offset + instanced_cluster_header.local_cluster_id;

        F_bbox cluster_bbox = cluster_bboxes[
            cluster_id / NRE_NEWRG_UNIFIED_MESH_CLUSTER_TABLE_PAGE_CAPACITY_IN_ELEMENTS
        ][
            cluster_id % NRE_NEWRG_UNIFIED_MESH_CLUSTER_TABLE_PAGE_CAPACITY_IN_ELEMENTS
        ];

        float4 bbox_corners[8];
        calculate_bbox_corners(cluster_bbox, bbox_corners);

        float4 view_bbox_corners[8];
        transform_cuboid_corners(local_to_view_matrix, bbox_corners, view_bbox_corners);
        
        float4 ndc_bbox_corners[8];
        cuboid_view_corners_to_ndc_corners(
            view_to_clip_matrix,
            view_near_plane,
            view_far_plane,
            view_bbox_corners, 
            ndc_bbox_corners
        );

        F_occluder occluder;
        calculate_occluder(
            view_bbox_corners,
            ndc_bbox_corners,
            occluder
        );

        float2 clamped_min_uv = clamp(
            occluder.min_ndc_xyz.xy,
            float2(-1.0f, -1.0f),
            float2(1.0f, 1.0f)
        ) * 0.5f + float2(0.5f, 0.5f);
        float2 clamped_max_uv = clamp(
            occluder.max_ndc_xyz.xy,
            float2(-1.0f, -1.0f),
            float2(1.0f, 1.0f)
        ) * 0.5f + float2(0.5f, 0.5f);

        float2 screen_size_float = screen_size;
        float2 screen_size_minus_one_float = screen_size_float - float2(1, 1);
        
        float2 first_screen_coord = floor(
            clamped_min_uv
            * screen_size_minus_one_float
        );
        float2 last_screen_coord = ceil(
            clamped_max_uv
            * screen_size_minus_one_float
        );

        uint2 local_group_count_2d = last_screen_coord - first_screen_coord + uint2(1, 1);

        uint hierarchical_group_level = ceil(
            log2(
                max(
                    local_group_count_2d.x,
                    local_group_count_2d.y
                )
            )
        );
        {
            uint lower_hierarchical_group_level = max(((int)hierarchical_group_level) - 1, 0);

            float2 lower_hierarchical_group_size_2d_float = float2(
                1U << lower_hierarchical_group_level, 
                1U << lower_hierarchical_group_level
            );

            uint2 first_lower_hierarchical_group_coord = floor(
                first_screen_coord
                / lower_hierarchical_group_size_2d_float
            );
            uint2 last_lower_hierarchical_group_coord = floor(
                last_screen_coord
                / lower_hierarchical_group_size_2d_float
            );

            uint2 local_lower_hierarchical_group_count_2d_minus_one = last_lower_hierarchical_group_coord - first_lower_hierarchical_group_coord;

            hierarchical_group_level = (
                (
                    (local_lower_hierarchical_group_count_2d_minus_one.x < 2)
                    && (local_lower_hierarchical_group_count_2d_minus_one.y < 2)
                )
                ? lower_hierarchical_group_level
                : hierarchical_group_level
            );
        }

        F_instanced_cluster_hierarchical_group_level_header hierarchical_group_level_header = global_shared_datas[0].hierarchical_group_level_headers[hierarchical_group_level];

        uint2 hierarchical_group_size_2d = uint2(
            1U << hierarchical_group_level, 
            1U << hierarchical_group_level
        );
        float2 hierarchical_group_size_2d_float = hierarchical_group_size_2d;

        uint2 first_hierarchical_group_coord = floor(
            first_screen_coord
            / hierarchical_group_size_2d_float
        );
        uint2 last_hierarchical_group_coord = floor(
            last_screen_coord
            / hierarchical_group_size_2d_float
        );

        uint2 local_hierarchical_group_count_2d = last_hierarchical_group_coord - first_hierarchical_group_coord + uint2(1, 1);
        uint local_hierarchical_group_count = local_hierarchical_group_count_2d.x * local_hierarchical_group_count_2d.y;

        uint base_node_id;
        InterlockedAdd(
            global_shared_datas[0].next_node_id,
            local_hierarchical_group_count,
            base_node_id
        );

        for(uint i = 0; i < local_hierarchical_group_count; ++i)
        {
            uint2 hierarchical_group_coord = first_hierarchical_group_coord + uint2(
                i % local_hierarchical_group_count_2d.x,
                i / local_hierarchical_group_count_2d.x
            );
            uint group_id = hierarchical_group_level_header.offset + (
                hierarchical_group_coord.y 
                * hierarchical_group_size_2d.x 
                + hierarchical_group_coord.x
            );

            uint node_id = base_node_id + i;

            uint last_expected_next_id = INVALID_INSTANCED_CLUSTER_NODE_ID;
            uint expected_next_id;

            node_instanced_cluster_ids[node_id] = instanced_cluster_id;

            do
            {
                expected_next_id = last_expected_next_id;

                next_node_ids[node_id] = expected_next_id;

                InterlockedCompareExchange(
                    hierarchical_group_head_node_ids[group_id],
                    expected_next_id,
                    node_id,
                    last_expected_next_id
                );
            }
            while(expected_next_id != last_expected_next_id);
        }
    }
}

@root_signature(NRE_NEWRG_ABYTEK_INSTANCED_CLUSTER_GROUP_LINK_BINDER_SIGNATURE)
pipeline_state PSO(CS)