
import(newrg/abytek/prerequisites.nsh)



@slot(0)
resource global_shared_datas(RWStructuredBuffer(F_build_instanced_cluster_group_global_shared_data))

@slot(1)
resource node_instanced_cluster_ids(RWBuffer(F_instanced_cluster_id))

@slot(2)
resource next_node_ids(RWBuffer(F_instanced_cluster_id))

@slot(3)
resource hierarchical_group_head_node_ids(RWBuffer(u32))

@slot(4)
resource group_headers(RWStructuredBuffer(F_instanced_cluster_group_header))

@slot(5)
resource instanced_cluster_remap_buffer(RWBuffer(F_instanced_cluster_id))

@slot(0 0)
resource options(ConstantBuffer)
uniform group_count_2d(uint2)



@thread_group_size(
    NRE_NEWRG_ABYTEK_DEFAULT_THREAD_GROUP_SIZE_X
    NRE_NEWRG_ABYTEK_DEFAULT_THREAD_GROUP_SIZE_Y
    NRE_NEWRG_ABYTEK_DEFAULT_THREAD_GROUP_SIZE_Z
)
compute_shader CS(
    global_thread_id(SV_DISPATCH_THREAD_ID)
)
{
    if(global_thread_id.x < (group_count_2d.x * group_count_2d.y))
    {
        uint hierarchical_group_level_count = global_shared_datas[0].hierarchical_group_level_count;

        uint2 group_id_2d = uint2(
            global_thread_id.x % group_count_2d.x,
            global_thread_id.x / group_count_2d.x
        );

        uint node_count = 0;

        // calculate node_count
        {
            F_instanced_cluster_hierarchical_group_level_header hierarchical_group_level_header = global_shared_datas[0].hierarchical_group_level_headers[0];
            
            uint hierarchical_group_id = (
                hierarchical_group_level_header.offset
                + group_id_2d.y * hierarchical_group_level_header.count_2d.x
                + group_id_2d.x
            );

            uint node_id = hierarchical_group_head_node_ids[hierarchical_group_id];

            while(node_id != INVALID_INSTANCED_CLUSTER_NODE_ID)
            {
                ++node_count;
                node_id = next_node_ids[node_id];
            }
        }

        //
        uint wave_instanced_cluster_remap_offset = WavePrefixSum(node_count);
        uint wave_instanced_cluster_remap_count = WaveActiveSum(node_count);

        uint global_instanced_cluster_remap_offset;

        if(WaveIsFirstLane())
        {
            InterlockedAdd(
                global_shared_datas[0].instanced_cluster_remap_range.count,
                wave_instanced_cluster_remap_count,
                global_instanced_cluster_remap_offset
            );
        }
        DeviceMemoryBarrierWithGroupSync();
    
        uint wave_global_instanced_cluster_remap_offset = WaveReadLaneFirst(global_instanced_cluster_remap_offset);
        uint instanced_cluster_remap_offset = (
            global_shared_datas[0].instanced_cluster_remap_range.offset 
            + wave_global_instanced_cluster_remap_offset 
            + wave_instanced_cluster_remap_offset
        );

        F_instanced_cluster_group_header group_header;
        group_header.instanced_cluster_remap_range.offset = instanced_cluster_remap_offset;
        group_header.instanced_cluster_remap_range.count = node_count;

        group_headers[global_thread_id.x] = group_header;

        // store back remap
        {
            uint local_node_id = 0;

            F_instanced_cluster_hierarchical_group_level_header hierarchical_group_level_header = global_shared_datas[0].hierarchical_group_level_headers[0];
            
            uint hierarchical_group_id = (
                hierarchical_group_level_header.offset
                + group_id_2d.y * hierarchical_group_level_header.count_2d.x
                + group_id_2d.x
            );

            uint node_id = hierarchical_group_head_node_ids[hierarchical_group_id];

            while(node_id != INVALID_INSTANCED_CLUSTER_NODE_ID)
            {
                instanced_cluster_remap_buffer[group_header.instanced_cluster_remap_range.offset + local_node_id] = node_id;

                ++local_node_id;
                node_id = next_node_ids[node_id];
            }
        }
    }
}

@root_signature(NRE_NEWRG_ABYTEK_INSTANCED_CLUSTER_GROUP_GATHER_BINDER_SIGNATURE)
pipeline_state PSO(CS)