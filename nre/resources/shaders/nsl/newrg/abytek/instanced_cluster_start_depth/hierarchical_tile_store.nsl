
import(newrg/abytek/prerequisites.nsh)



@slot(0)
resource global_shared_datas(RWStructuredBuffer(F_build_instanced_cluster_tile_global_shared_data))

@slot(1)
resource node_instanced_cluster_ids(RWStructuredBuffer(F_instanced_cluster_id))

@slot(2)
resource node_hierarchical_tile_coords(RWBuffer(uint2))

@slot(0)
resource instanced_cluster_screen_coord_ranges(StructuredBuffer(F_coord_2d_range))



@thread_group_size(
    NRE_NEWRG_ABYTEK_DEFAULT_THREAD_GROUP_SIZE_X
    NRE_NEWRG_ABYTEK_DEFAULT_THREAD_GROUP_SIZE_Y
    NRE_NEWRG_ABYTEK_DEFAULT_THREAD_GROUP_SIZE_Z
)
compute_shader CS(
    global_thread_id(SV_DISPATCH_THREAD_ID)
)
{
    F_instanced_cluster_range instanced_cluster_range = global_shared_datas[0].instanced_cluster_range;

    if(global_thread_id.x < instanced_cluster_range.count)
    {
        F_instanced_cluster_id instanced_cluster_id = instanced_cluster_range.offset + global_thread_id.x;

        F_coord_2d_range instanced_cluster_screen_coord_range = instanced_cluster_screen_coord_ranges[instanced_cluster_id];
        
        float2 first_screen_coord = instanced_cluster_screen_coord_range.offset_2d;
        float2 last_screen_coord = instanced_cluster_screen_coord_range.offset_2d + instanced_cluster_screen_coord_range.count_2d - uint2(1, 1);

        float2 tile_size_2d_float = float2(NRE_NEWRG_ABYTEK_INSTANCED_CLUSTER_TILE_SIZE_X, NRE_NEWRG_ABYTEK_INSTANCED_CLUSTER_TILE_SIZE_Y);

        uint2 first_tile_coord = floor(
            first_screen_coord
            / tile_size_2d_float
        );
        uint2 last_tile_coord = floor(
            last_screen_coord
            / tile_size_2d_float
        );

        uint2 local_tile_count_2d = last_tile_coord - first_tile_coord + uint2(1, 1);

        uint hierarchical_tile_level = ceil(
            log2(
                min(
                    local_tile_count_2d.x,
                    local_tile_count_2d.y
                )
            )
        );
        // hierarchical_tile_level = max(((int)hierarchical_tile_level) - 1, 0);
        {
            uint lower_hierarchical_tile_level = max(((int)hierarchical_tile_level) - 1, 0);

            float2 lower_hierarchical_tile_size_2d_float = float2(
                ((u32)NRE_NEWRG_ABYTEK_INSTANCED_CLUSTER_TILE_SIZE_X) << lower_hierarchical_tile_level, 
                ((u32)NRE_NEWRG_ABYTEK_INSTANCED_CLUSTER_TILE_SIZE_Y) << lower_hierarchical_tile_level
            );

            uint2 first_lower_hierarchical_tile_coord = floor(
                first_screen_coord
                / lower_hierarchical_tile_size_2d_float
            );
            uint2 last_lower_hierarchical_tile_coord = floor(
                last_screen_coord
                / lower_hierarchical_tile_size_2d_float
            );

            uint2 local_lower_hierarchical_tile_count_2d = last_lower_hierarchical_tile_coord - first_lower_hierarchical_tile_coord + uint2(1, 1);

            hierarchical_tile_level = (
                // (local_lower_hierarchical_tile_count_2d.x * local_lower_hierarchical_tile_count_2d.y <= 16)
                (local_lower_hierarchical_tile_count_2d.x * local_lower_hierarchical_tile_count_2d.y <= 4)
                ? lower_hierarchical_tile_level
                : hierarchical_tile_level
            );
        }

        F_instanced_cluster_hierarchical_tile_level_header hierarchical_tile_level_header = global_shared_datas[0].hierarchical_tile_level_headers[hierarchical_tile_level];

        uint2 hierarchical_tile_size_2d = uint2(
            ((u32)NRE_NEWRG_ABYTEK_INSTANCED_CLUSTER_TILE_SIZE_X) << hierarchical_tile_level, 
            ((u32)NRE_NEWRG_ABYTEK_INSTANCED_CLUSTER_TILE_SIZE_Y) << hierarchical_tile_level
        );
        float2 hierarchical_tile_size_2d_float = hierarchical_tile_size_2d;

        uint2 first_hierarchical_tile_coord = floor(
            first_screen_coord
            / hierarchical_tile_size_2d_float
        );
        uint2 last_hierarchical_tile_coord = floor(
            last_screen_coord
            / hierarchical_tile_size_2d_float
        );

        uint2 local_hierarchical_tile_count_2d = last_hierarchical_tile_coord - first_hierarchical_tile_coord + uint2(1, 1);
        uint local_hierarchical_tile_count = local_hierarchical_tile_count_2d.x * local_hierarchical_tile_count_2d.y;

        uint base_node_id;
        InterlockedAdd(
            global_shared_datas[0].hierarchical_tile_level_headers[hierarchical_tile_level].node_write_offset,
            local_hierarchical_tile_count,
            base_node_id
        );

        for(uint i = 0; i < local_hierarchical_tile_count; ++i)
        {
            uint2 hierarchical_tile_coord = first_hierarchical_tile_coord + uint2(
                i % local_hierarchical_tile_count_2d.x,
                i / local_hierarchical_tile_count_2d.x
            );

            uint node_id = base_node_id + i;

            node_instanced_cluster_ids[node_id] = instanced_cluster_id;
            node_hierarchical_tile_coords[node_id] = hierarchical_tile_coord;
        }
    }
}

root_signature ROOT_SIGNATURE(
    DESCRIPTOR_TABLE(
        UAV(3)

        SRV(1)
    )
)

@root_signature(ROOT_SIGNATURE)
pipeline_state PSO(CS)