
import(newrg/abytek/prerequisites.nsh)
import(newrg/abytek/geometry_utilities.nsh)



semantic VERTEX_WORLD_POSITION(float3)
semantic VERTEX_WORLD_NORMAL(float3)
semantic VERTEX_WORLD_TANGENT(float3)
semantic VERTEX_CLUSTER_ID(uint)



struct F_mesh_vertex_data(
    vertex_world_position(VERTEX_WORLD_POSITION)
    vertex_world_normal(VERTEX_WORLD_NORMAL)
    vertex_world_tangent(VERTEX_WORLD_TANGENT)
    vertex_cluster_id(VERTEX_CLUSTER_ID)
    vertex_clip_position(SV_POSITION)
)



@slot(0 0)
resource global_options(ConstantBuffer)
uniform color(float3)
// 0 : cluster color
// 1 : solid color
uniform color_mode(u32) 
uniform light_dir(float3)
uniform ___global_options_padding_0___(u32)
uniform instanced_cluster_range_index(u32)

define NRE_NEWRG_ABYTEK_VIEW_BUFFER_SLOT(1)
define NRE_NEWRG_ABYTEK_VIEW_BUFFER_SLOT_SPACE(0)
import(newrg/abytek/view.nssm)

@slot(2 0)
resource instanced_cluster_ranges_cbuffer(ConstantBuffer)
uniform instanced_cluster_ranges(F_instanced_cluster_range 16)

@slot(0 0)
resource instanced_cluster_headers(StructuredBuffer(F_instanced_cluster_header))

@slot(0 1)
resource mesh_headers(StructuredBuffer(F_mesh_header) -1)

@slot(0 2)
resource subpage_headers(StructuredBuffer(F_mesh_subpage_header) -1)

@slot(0 3)
resource cluster_headers(StructuredBuffer(F_cluster_header) -1)

@slot(0 4)
resource vertex_datas(StructuredBuffer(F_vertex_data) -1)

@slot(0 5)
resource triangle_vertex_ids(Buffer(uint) -1)

@slot(0 6)
resource instance_transforms(StructuredBuffer(float4x4) -1)

@slot(0 7)
resource instance_mesh_ids(Buffer(F_mesh_id) -1)



@thread_group_size(
    NRE_NEWRG_UNIFIED_MESH_MAX_TRIANGLE_COUNT_PER_CLUSTER
    1
    1
)
mesh_shader MS(
    group_thread_id(SV_GROUP_THREAD_ID)
    group_id(SV_GROUP_ID)
    @indices
    out out_mesh_triangles(u32x3 124)
    @vertices
    out out_mesh_vertex_datas(F_mesh_vertex_data 124)
)
{
    F_instanced_cluster_header instanced_cluster_header = instanced_cluster_headers[instanced_cluster_ranges[instanced_cluster_range_index].offset + group_id.x];

    F_instance_id instance_id = instanced_cluster_header.instance_id;
    F_cluster_id local_cluster_id = instanced_cluster_header.local_cluster_id;

    F_mesh_id mesh_id = instance_mesh_ids[
        instance_id / NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
    ][
        instance_id % NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
    ];

    float4x4 local_to_world_matrix = instance_transforms[
        instance_id / NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
    ][
        instance_id % NRE_NEWRG_RENDER_PRIMITIVE_DATA_POOL_PAGE_CAPACITY_IN_ELEMENTS
    ];

    F_mesh_header mesh_header = mesh_headers[
        mesh_id / NRE_NEWRG_UNIFIED_MESH_TABLE_PAGE_CAPACITY_IN_ELEMENTS
    ][
        mesh_id % NRE_NEWRG_UNIFIED_MESH_TABLE_PAGE_CAPACITY_IN_ELEMENTS
    ];

    F_cluster_id cluster_id = mesh_header.cluster_offset + local_cluster_id;

    F_cluster_header cluster_header = cluster_headers[
        cluster_id / NRE_NEWRG_UNIFIED_MESH_CLUSTER_TABLE_PAGE_CAPACITY_IN_ELEMENTS
    ][
        cluster_id % NRE_NEWRG_UNIFIED_MESH_CLUSTER_TABLE_PAGE_CAPACITY_IN_ELEMENTS
    ];

    u32 subpage_id = mesh_header.subpage_offset + local_cluster_id / NRE_NEWRG_UNIFIED_MESH_SUBPAGE_CAPACITY_IN_CLUSTERS;
    F_mesh_subpage_header subpage_header = subpage_headers[
        subpage_id / NRE_NEWRG_UNIFIED_MESH_SUBPAGE_HEADER_TABLE_PAGE_CAPACITY_IN_ELEMENTS
    ][
        subpage_id % NRE_NEWRG_UNIFIED_MESH_SUBPAGE_HEADER_TABLE_PAGE_CAPACITY_IN_ELEMENTS
    ];

    u32 triangle_count = cluster_header.local_triangle_vertex_id_count / 3;

    SetMeshOutputCounts(cluster_header.vertex_count, triangle_count);

    if(group_thread_id.x < triangle_count)
    {
        uint index_offset = subpage_header.index_offset + (uint)(cluster_header.local_triangle_vertex_id_offset) + group_thread_id.x * 3;

        Buffer<uint> index_buffer = triangle_vertex_ids[index_offset / NRE_NEWRG_UNIFIED_MESH_TRIANGLE_VERTEX_ID_TABLE_PAGE_CAPACITY_IN_ELEMENTS];

        uint index_location_0 = index_offset + 0;
        uint index_location_1 = index_offset + 1;
        uint index_location_2 = index_offset + 2;

        out_mesh_triangles[group_thread_id.x] = uint3(
            index_buffer[
                index_location_0 % NRE_NEWRG_UNIFIED_MESH_TRIANGLE_VERTEX_ID_TABLE_PAGE_CAPACITY_IN_ELEMENTS
            ],
            index_buffer[
                index_location_1 % NRE_NEWRG_UNIFIED_MESH_TRIANGLE_VERTEX_ID_TABLE_PAGE_CAPACITY_IN_ELEMENTS
            ],
            index_buffer[
                index_location_2 % NRE_NEWRG_UNIFIED_MESH_TRIANGLE_VERTEX_ID_TABLE_PAGE_CAPACITY_IN_ELEMENTS
            ]
        );
    }

    if(group_thread_id.x < cluster_header.vertex_count)
    {
        uint vertex_offset = subpage_header.vertex_offset + cluster_header.vertex_offset + group_thread_id.x;

        F_vertex_data vertex_data = vertex_datas[
            vertex_offset / NRE_NEWRG_UNIFIED_MESH_VERTEX_DATA_TABLE_PAGE_CAPACITY_IN_ELEMENTS
        ][
            vertex_offset % NRE_NEWRG_UNIFIED_MESH_VERTEX_DATA_TABLE_PAGE_CAPACITY_IN_ELEMENTS
        ];

        float4 vertex_world_position = mul(local_to_world_matrix, float4(vertex_data.position, 1.0f));
        float3 vertex_world_normal = normalize(mul((float3x3)local_to_world_matrix, vertex_data.normal));
        float3 vertex_world_tangent = normalize(mul((float3x3)local_to_world_matrix, vertex_data.tangent));

        float4 vertex_view_position = mul(world_to_view_matrix, vertex_world_position);
        float4 vertex_clip_position = mul(view_to_clip_matrix, vertex_view_position);

        F_mesh_vertex_data mesh_vertex_data;
        mesh_vertex_data.vertex_world_position = vertex_world_position.xyz;
        mesh_vertex_data.vertex_world_normal = vertex_world_normal;
        mesh_vertex_data.vertex_world_tangent = vertex_world_tangent;
        mesh_vertex_data.vertex_cluster_id = cluster_id;
        mesh_vertex_data.vertex_clip_position = vertex_clip_position;

        out_mesh_vertex_datas[group_thread_id.x] = mesh_vertex_data;
    }
}
pixel_shader PS(
    in mesh_vertex_data(F_mesh_vertex_data)
    out out_color(SV_TARGET)
)
{
    float4 cluster_color = float4(color * id_to_color(mesh_vertex_data.vertex_cluster_id), 1);

    float4 albedo_colors[] = {
        cluster_color,
        float4(color, 1)
    };
    
    float4 final_color = (
        albedo_colors[color_mode]
        * lerp(
            0.05f, 
            1.0f,
            saturate(
                dot(normalize(mesh_vertex_data.vertex_world_normal), -light_dir)
            )
        ) 
    );

    out_color = (final_color * 3.1415) / (float4(1, 1, 1, 1) + (final_color * 3.1415));
}

require(!FILL_MODE)
{
    define FILL_MODE(SOLID)
}

@root_signature(NRE_NEWRG_ABYTEK_SIMPLE_DRAW_INSTANCED_CLUSTERS_BINDER_SIGNATURE)
@rasterizer(
    cull_mode(NONE)
    fill_mode(FILL_MODE)
)
@depth_stencil
(
    enable_depth_test(true)
    depth_comparison_func(GREATER_EQUAL)
)
pipeline_state PSO(MS PS)