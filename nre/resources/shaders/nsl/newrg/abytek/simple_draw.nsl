
import(newrg/abytek/prerequisites.nsh)
import(newrg/abytek/geometry_utilities.nsh)



@classification(PER_VERTEX_DATA)
semantic VERTEX_POSITION(float3)



struct F_mesh_vertex_data(
    vertex_world_position(VERTEX_POSITION)
    vertex_clip_position(SV_POSITION)
)



@slot(0 0)
resource global_options(
    ConstantBuffer
)
uniform color(
    float3
)

@slot(1 0)
resource per_object_options(
    ConstantBuffer
)
uniform local_to_world_matrix(
    float4x4
)
uniform cluster_offset(
    u32
)
uniform cluster_count(
    u32
)

define NRE_NEWRG_ABYTEK_VIEW_BUFFER_SLOT(2)
define NRE_NEWRG_ABYTEK_VIEW_BUFFER_SLOT_SPACE(0)
import(newrg/abytek/view.nsh)

@slot(0 1)
resource mesh_headers(
    StructuredBuffer(F_mesh_header)
    -1
)

@slot(0 2)
resource subpage_headers(
    StructuredBuffer(F_mesh_subpage_header)
    -1
)

@slot(0 3)
resource cluster_headers(
    StructuredBuffer(F_cluster_header)
    -1
)



@thread_group_size(
    NRE_NEWRG_UNIFIED_MESH_MAX_TRIANGLE_COUNT_PER_CLUSTER
    1
    1
)
mesh_shader MS(
    group_thread_id(SV_GROUP_THREAD_ID)
    group_id(SV_GROUP_ID)
    @indices
    out out_mesh_triangles(u32x3 124)
    @vertices
    out out_mesh_vertex_datas(F_mesh_vertex_data 124)
)
{
    SetMeshOutputCounts(1, 1);

    out_mesh_triangles[0] = uint3(0, 0, 0);

    out_mesh_vertex_datas[0].vertex_world_position = float3(0, 0, 0);
    out_mesh_vertex_datas[0].vertex_clip_position = float4(0, 0, 0, 1);
}
pixel_shader PS(
    out out_color(SV_TARGET)
)
{
    out_color = float4(1, 1, 1, 1);
}

@root_signature(NRE_NEWRG_ABYTEK_SIMPLE_DRAW_BINDER_SIGNATURE)
@rasterizer(
    cull_mode(NONE)
    fill_mode(SOLID)
)
pipeline_state PSO(MS PS)