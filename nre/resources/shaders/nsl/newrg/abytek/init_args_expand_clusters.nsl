
import(newrg/abytek/prerequisites.nsh)



struct F_options(
    instanced_cluster_range(F_instanced_cluster_range)
)
@slot(0)
resource options(RWStructuredBuffer(F_options))



@slot(1)
resource global_shared_datas(RWStructuredBuffer(F_expand_clusters_global_shared_data))

@slot(2)
resource dispatch_indirect_arguments(RWStructuredBuffer(F_dispatch_indirect_argument))

@slot(3)
resource global_cached_candidate_batches(RWStructuredBuffer(F_cached_candidate_batch))



@thread_group_size(
    NRE_NEWRG_ABYTEK_DEFAULT_THREAD_GROUP_SIZE_X
    1
    1
)
compute_shader CS(
    global_thread_id(SV_DISPATCH_THREAD_ID)
)
{
    if(global_thread_id.x == 0)
    {
        F_instanced_cluster_range instanced_cluster_range = options[0].instanced_cluster_range;

        global_shared_datas[0].counter = instanced_cluster_range.count;
        global_shared_datas[0].cached_candidate_batch_offset = 0;
        global_shared_datas[0].cached_candidate_offset = 0;
        global_shared_datas[0].instanced_cluster_range = instanced_cluster_range;
        global_shared_datas[0].expanded_instanced_cluster_range.offset = instanced_cluster_range.offset + instanced_cluster_range.count;
        global_shared_datas[0].expanded_instanced_cluster_range.count = 0;
        global_shared_datas[0].cached_candidate_batch_read_offset = 0;

        dispatch_indirect_arguments[0] = F_dispatch_indirect_argument(
            ceil(
                min(
                    global_shared_datas[0].max_task_capacity,
                    ((f32)instanced_cluster_range.count) 
                    * global_shared_datas[0].task_capacity_factor 
                )
                / ((f32)NRE_NEWRG_ABYTEK_EXPAND_CLUSTERS_BATCH_SIZE)
            ),
            1,
            1
        );
    }

    if(global_thread_id.x < NRE_NEWRG_ABYTEK_EXPAND_CLUSTERS_MAX_CACHED_CANDIDATE_BATCH_COUNT)
    {
        global_cached_candidate_batches[global_thread_id.x].count = 0;
    }
}

@root_signature(NRE_NEWRG_ABYTEK_INIT_ARGS_EXPAND_CLUSTERS_BINDER_SIGNATURE)
pipeline_state PSO(CS)